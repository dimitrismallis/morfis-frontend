// vite.config.ts
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///workspace/yacv_custom/node_modules/vite/dist/node/index.js";
import vue from "file:///workspace/yacv_custom/node_modules/@vitejs/plugin-vue/dist/index.js";
import vueJsx from "file:///workspace/yacv_custom/node_modules/@vitejs/plugin-vue-jsx/dist/index.js";

// package.json
var name = "yet-another-cad-viewer";
var version = "0.10.10";

// vite.config.ts
import { execSync } from "child_process";
import { viteStaticCopy } from "file:///workspace/yacv_custom/node_modules/vite-plugin-static-copy/dist/index.js";
import { dirname, join } from "path";
import { version as pyodideVersion } from "file:///workspace/yacv_custom/node_modules/pyodide/pyodide.mjs";
var __vite_injected_original_import_meta_url = "file:///workspace/yacv_custom/vite.config.ts";
var wantsSmallBuild = process.env.YACV_SMALL_BUILD == "true";
var vite_config_default = defineConfig({
  base: "",
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: (tag) => tag == "model-viewer"
        }
      }
    }),
    vueJsx(),
    viteStaticCopyPyodide()
  ],
  optimizeDeps: { exclude: ["pyodide"] },
  resolve: {
    alias: {
      // @ts-ignore
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  build: {
    assetsDir: ".",
    // Support deploying to a subdirectory using relative URLs
    cssCodeSplit: false,
    // Small enough to inline
    chunkSizeWarningLimit: 1024,
    // KB. Three.js is big. Draco is even bigger but not likely to be used.
    sourcemap: true,
    // For debugging production
    rollupOptions: {
      output: {
        experimentalMinChunkSize: 512e3
        // 512KB (avoid too many small chunks)
      },
      external: wantsSmallBuild ? [
        // Exclude some large optional dependencies if small build is requested (for embedding in python package)
        "pyodide",
        /.*\/pyodide-worker.*/,
        "monaco-editor",
        /monaco-editor\/.*/,
        "@guolao/vue-monaco-editor",
        /three\/examples\/jsm\/libs\/draco\/draco_(en|de)coder\.js/
      ] : []
    }
  },
  worker: {
    format: "es"
    // Use ES modules for workers (IIFE is not supported with code-splitting)
  },
  define: {
    __APP_NAME__: JSON.stringify(name),
    __APP_VERSION__: JSON.stringify(version),
    __APP_GIT_SHA__: JSON.stringify(execSync("git rev-parse HEAD").toString().trim()),
    __APP_GIT_DIRTY__: JSON.stringify(execSync("git diff --quiet || echo dirty").toString().trim()),
    __YACV_SMALL_BUILD__: JSON.stringify(wantsSmallBuild)
  }
});
function viteStaticCopyPyodide() {
  const PYODIDE_EXCLUDE = [
    "!**/*.{md,html}",
    "!**/*.d.ts",
    "!**/*.whl",
    "!**/node_modules"
  ];
  const pyodideDir = dirname(fileURLToPath(import.meta.resolve("pyodide")));
  return viteStaticCopy({
    targets: wantsSmallBuild ? [] : [
      {
        src: [join(pyodideDir, "*")].concat(PYODIDE_EXCLUDE),
        dest: "pyodide-v" + pyodideVersion
        // It would be better to use hashed names instead of folder...
      }
    ]
  });
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
