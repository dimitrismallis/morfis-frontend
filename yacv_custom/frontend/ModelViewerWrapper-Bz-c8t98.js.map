{"version":3,"file":"ModelViewerWrapper-Bz-c8t98.js","sources":["../node_modules/three-mesh-bvh/src/core/Constants.js","../node_modules/three-mesh-bvh/src/core/build/geometryUtils.js","../node_modules/three-mesh-bvh/src/core/build/computeBoundsUtils.js","../node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js","../node_modules/three-mesh-bvh/src/core/build/splitUtils.js","../node_modules/three-mesh-bvh/src/core/MeshBVHNode.js","../node_modules/three-mesh-bvh/src/core/build/sortUtils.generated.js","../node_modules/three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js","../node_modules/three-mesh-bvh/src/core/utils/nodeBufferUtils.js","../node_modules/three-mesh-bvh/src/core/build/buildUtils.js","../node_modules/three-mesh-bvh/src/core/build/buildTree.js","../node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js","../node_modules/three-mesh-bvh/src/math/MathUtilities.js","../node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js","../node_modules/three-mesh-bvh/src/math/OrientedBox.js","../node_modules/three-mesh-bvh/src/utils/PrimitivePool.js","../node_modules/three-mesh-bvh/src/utils/ExtendedTrianglePool.js","../node_modules/three-mesh-bvh/src/core/utils/BufferStack.js","../node_modules/three-mesh-bvh/src/core/cast/shapecast.js","../node_modules/three-mesh-bvh/src/core/cast/closestPointToPoint.js","../node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js","../node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js","../node_modules/three-mesh-bvh/src/core/utils/iterationUtils.generated.js","../node_modules/three-mesh-bvh/src/core/cast/refit.generated.js","../node_modules/three-mesh-bvh/src/core/utils/intersectUtils.js","../node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js","../node_modules/three-mesh-bvh/src/core/cast/raycast.generated.js","../node_modules/three-mesh-bvh/src/core/cast/raycastFirst.generated.js","../node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js","../node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js","../node_modules/three-mesh-bvh/src/core/cast/refit_indirect.generated.js","../node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js","../node_modules/three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js","../node_modules/three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js","../node_modules/three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js","../node_modules/three-mesh-bvh/src/utils/BufferUtils.js","../node_modules/three-mesh-bvh/src/core/cast/bvhcast.js","../node_modules/three-mesh-bvh/src/core/MeshBVH.js","../node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js","../node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js","../src/viewer/ModelViewerWrapper.vue"],"sourcesContent":["// Split strategy constants\nexport const CENTER = 0;\nexport const AVERAGE = 1;\nexport const SAH = 2;\n\n// Traversal constants\nexport const NOT_INTERSECTED = 0;\nexport const INTERSECTED = 1;\nexport const CONTAINED = 2;\n\n// SAH cost constants\n// TODO: hone these costs more. The relative difference between them should be the\n// difference in measured time to perform a triangle intersection vs traversing\n// bounds.\nexport const TRIANGLE_INTERSECT_COST = 1.25;\nexport const TRAVERSAL_COST = 1;\n\n\n// Build constants\nexport const BYTES_PER_NODE = 6 * 4 + 4 + 4;\nexport const IS_LEAFNODE_FLAG = 0xFFFF;\n\n// EPSILON for computing floating point error during build\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nexport const FLOAT32_EPSILON = Math.pow( 2, - 24 );\n\nexport const SKIP_GENERATION = Symbol( 'SKIP_GENERATION' );\n","import { BufferAttribute } from 'three';\n\nexport function getVertexCount( geo ) {\n\n\treturn geo.index ? geo.index.count : geo.attributes.position.count;\n\n}\n\nexport function getTriCount( geo ) {\n\n\treturn getVertexCount( geo ) / 3;\n\n}\n\nexport function getIndexArray( vertexCount, BufferConstructor = ArrayBuffer ) {\n\n\tif ( vertexCount > 65535 ) {\n\n\t\treturn new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t} else {\n\n\t\treturn new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t}\n\n}\n\n// ensures that an index is present on the geometry\nexport function ensureIndex( geo, options ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tconst index = getIndexArray( vertexCount, BufferConstructor );\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nexport function getFullGeometryRange( geo, range ) {\n\n\tconst triCount = getTriCount( geo );\n\tconst drawRange = range ? range : geo.drawRange;\n\tconst start = drawRange.start / 3;\n\tconst end = ( drawRange.start + drawRange.count ) / 3;\n\n\tconst offset = Math.max( 0, start );\n\tconst count = Math.min( triCount, end ) - offset;\n\treturn [ {\n\t\toffset: Math.floor( offset ),\n\t\tcount: Math.floor( count ),\n\t} ];\n\n}\n\nexport function getRootIndexRanges( geo, range ) {\n\n\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\treturn getFullGeometryRange( geo, range );\n\n\t}\n\n\tconst ranges = [];\n\tconst rangeBoundaries = new Set();\n\n\tconst drawRange = range ? range : geo.drawRange;\n\tconst drawRangeStart = drawRange.start / 3;\n\tconst drawRangeEnd = ( drawRange.start + drawRange.count ) / 3;\n\tfor ( const group of geo.groups ) {\n\n\t\tconst groupStart = group.start / 3;\n\t\tconst groupEnd = ( group.start + group.count ) / 3;\n\t\trangeBoundaries.add( Math.max( drawRangeStart, groupStart ) );\n\t\trangeBoundaries.add( Math.min( drawRangeEnd, groupEnd ) );\n\n\t}\n\n\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\tconst start = sortedBoundaries[ i ];\n\t\tconst end = sortedBoundaries[ i + 1 ];\n\n\t\tranges.push( {\n\t\t\toffset: Math.floor( start ),\n\t\t\tcount: Math.floor( end - start ),\n\t\t} );\n\n\t}\n\n\treturn ranges;\n\n}\n\nexport function hasGroupGaps( geometry, range ) {\n\n\tconst vertexCount = getTriCount( geometry );\n\tconst groups = getRootIndexRanges( geometry, range )\n\t\t.sort( ( a, b ) => a.offset - b.offset );\n\n\tconst finalGroup = groups[ groups.length - 1 ];\n\tfinalGroup.count = Math.min( vertexCount - finalGroup.offset, finalGroup.count );\n\n\tlet total = 0;\n\tgroups.forEach( ( { count } ) => total += count );\n\treturn vertexCount !== total;\n\n}\n","import { FLOAT32_EPSILON } from '../Constants.js';\nimport { getTriCount } from './geometryUtils.js';\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in \"target\".\n// A bounding box is computed for the centroids of the triangles, as well, and placed in \"centroidTarget\".\n// These are computed together to avoid redundant accesses to bounds array.\nexport function getBounds( triangleBounds, offset, count, target, centroidTarget ) {\n\n\tlet minx = Infinity;\n\tlet miny = Infinity;\n\tlet minz = Infinity;\n\tlet maxx = - Infinity;\n\tlet maxy = - Infinity;\n\tlet maxz = - Infinity;\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tconst hx = triangleBounds[ i + 1 ];\n\t\tconst lx = cx - hx;\n\t\tconst rx = cx + hx;\n\t\tif ( lx < minx ) minx = lx;\n\t\tif ( rx > maxx ) maxx = rx;\n\t\tif ( cx < cminx ) cminx = cx;\n\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tconst hy = triangleBounds[ i + 3 ];\n\t\tconst ly = cy - hy;\n\t\tconst ry = cy + hy;\n\t\tif ( ly < miny ) miny = ly;\n\t\tif ( ry > maxy ) maxy = ry;\n\t\tif ( cy < cminy ) cminy = cy;\n\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tconst hz = triangleBounds[ i + 5 ];\n\t\tconst lz = cz - hz;\n\t\tconst rz = cz + hz;\n\t\tif ( lz < minz ) minz = lz;\n\t\tif ( rz > maxz ) maxz = rz;\n\t\tif ( cz < cminz ) cminz = cz;\n\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\ttarget[ 0 ] = minx;\n\ttarget[ 1 ] = miny;\n\ttarget[ 2 ] = minz;\n\n\ttarget[ 3 ] = maxx;\n\ttarget[ 4 ] = maxy;\n\ttarget[ 5 ] = maxz;\n\n\tcentroidTarget[ 0 ] = cminx;\n\tcentroidTarget[ 1 ] = cminy;\n\tcentroidTarget[ 2 ] = cminz;\n\n\tcentroidTarget[ 3 ] = cmaxx;\n\tcentroidTarget[ 4 ] = cmaxy;\n\tcentroidTarget[ 5 ] = cmaxz;\n\n}\n\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nexport function computeTriangleBounds( geo, target = null, offset = null, count = null ) {\n\n\tconst posAttr = geo.attributes.position;\n\tconst index = geo.index ? geo.index.array : null;\n\tconst triCount = getTriCount( geo );\n\tconst normalized = posAttr.normalized;\n\tlet triangleBounds;\n\tif ( target === null ) {\n\n\t\ttriangleBounds = new Float32Array( triCount * 6 );\n\t\toffset = 0;\n\t\tcount = triCount;\n\n\t} else {\n\n\t\ttriangleBounds = target;\n\t\toffset = offset || 0;\n\t\tcount = count || triCount;\n\n\t}\n\n\t// used for non-normalized positions\n\tconst posArr = posAttr.array;\n\n\t// support for an interleaved position buffer\n\tconst bufferOffset = posAttr.offset || 0;\n\tlet stride = 3;\n\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\tstride = posAttr.data.stride;\n\n\t}\n\n\t// used for normalized positions\n\tconst getters = [ 'getX', 'getY', 'getZ' ];\n\n\tfor ( let tri = offset; tri < offset + count; tri ++ ) {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst tri6 = tri * 6;\n\n\t\tlet ai = tri3 + 0;\n\t\tlet bi = tri3 + 1;\n\t\tlet ci = tri3 + 2;\n\n\t\tif ( index ) {\n\n\t\t\tai = index[ ai ];\n\t\t\tbi = index[ bi ];\n\t\t\tci = index[ ci ];\n\n\t\t}\n\n\t\t// we add the stride and offset here since we access the array directly\n\t\t// below for the sake of performance\n\t\tif ( ! normalized ) {\n\n\t\t\tai = ai * stride + bufferOffset;\n\t\t\tbi = bi * stride + bufferOffset;\n\t\t\tci = ci * stride + bufferOffset;\n\n\t\t}\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tlet a, b, c;\n\n\t\t\tif ( normalized ) {\n\n\t\t\t\ta = posAttr[ getters[ el ] ]( ai );\n\t\t\t\tb = posAttr[ getters[ el ] ]( bi );\n\t\t\t\tc = posAttr[ getters[ el ] ]( ci );\n\n\t\t\t} else {\n\n\t\t\t\ta = posArr[ ai + el ];\n\t\t\t\tb = posArr[ bi + el ];\n\t\t\t\tc = posArr[ ci + el ];\n\n\t\t\t}\n\n\t\t\tlet min = a;\n\t\t\tif ( b < min ) min = b;\n\t\t\tif ( c < min ) min = c;\n\n\t\t\tlet max = a;\n\t\t\tif ( b > max ) max = b;\n\t\t\tif ( c > max ) max = c;\n\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t// worked with.\n\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\tconst el2 = el * 2;\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t}\n\n\t}\n\n\treturn triangleBounds;\n\n}\n","export function arrayToBox( nodeIndex32, array, target ) {\n\n\ttarget.min.x = array[ nodeIndex32 ];\n\ttarget.min.y = array[ nodeIndex32 + 1 ];\n\ttarget.min.z = array[ nodeIndex32 + 2 ];\n\n\ttarget.max.x = array[ nodeIndex32 + 3 ];\n\ttarget.max.y = array[ nodeIndex32 + 4 ];\n\ttarget.max.z = array[ nodeIndex32 + 5 ];\n\n\treturn target;\n\n}\n\nexport function makeEmptyBounds( target ) {\n\n\ttarget[ 0 ] = target[ 1 ] = target[ 2 ] = Infinity;\n\ttarget[ 3 ] = target[ 4 ] = target[ 5 ] = - Infinity;\n\n}\n\nexport function getLongestEdgeIndex( bounds ) {\n\n\tlet splitDimIdx = - 1;\n\tlet splitDist = - Infinity;\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\tif ( dist > splitDist ) {\n\n\t\t\tsplitDist = dist;\n\t\t\tsplitDimIdx = i;\n\n\t\t}\n\n\t}\n\n\treturn splitDimIdx;\n\n}\n\n// copies bounds a into bounds b\nexport function copyBounds( source, target ) {\n\n\ttarget.set( source );\n\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds( a, b, target ) {\n\n\tlet aVal, bVal;\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst d3 = d + 3;\n\n\t\t// set the minimum values\n\t\taVal = a[ d ];\n\t\tbVal = b[ d ];\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\n\n\t\t// set the max values\n\t\taVal = a[ d3 ];\n\t\tbVal = b[ d3 ];\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\n\n\t}\n\n}\n\n// expands the given bounds by the provided triangle bounds\nexport function expandByTriangleBounds( startIndex, triangleBounds, bounds ) {\n\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst tCenter = triangleBounds[ startIndex + 2 * d ];\n\t\tconst tHalf = triangleBounds[ startIndex + 2 * d + 1 ];\n\n\t\tconst tMin = tCenter - tHalf;\n\t\tconst tMax = tCenter + tHalf;\n\n\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\tbounds[ d ] = tMin;\n\n\t\t}\n\n\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t}\n\n\t}\n\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea( bounds ) {\n\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\n\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\n\n}\n","import { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds, expandByTriangleBounds } from '../../utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST } from '../Constants.js';\n\nconst BIN_COUNT = 32;\nconst binsSort = ( a, b ) => a.candidate - b.candidate;\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\treturn {\n\n\t\tcount: 0,\n\t\tbounds: new Float32Array( 6 ),\n\t\trightCacheBounds: new Float32Array( 6 ),\n\t\tleftCacheBounds: new Float32Array( 6 ),\n\t\tcandidate: 0,\n\n\t};\n\n} );\nconst leftBounds = new Float32Array( 6 );\n\nexport function getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\tlet axis = - 1;\n\tlet pos = 0;\n\n\t// Center\n\tif ( strategy === CENTER ) {\n\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t}\n\n\t} else if ( strategy === AVERAGE ) {\n\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t}\n\n\t} else if ( strategy === SAH ) {\n\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t// iterate over all axes\n\t\tconst cStart = offset * 6;\n\t\tconst cEnd = ( offset + count ) * 6;\n\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t// If we have fewer triangles than we're planning to split then just check all\n\t\t\t// the triangle positions because it will be faster.\n\t\t\tif ( count < BIN_COUNT / 4 ) {\n\n\t\t\t\t// initialize the bin candidates\n\t\t\t\tconst truncatedBins = [ ...sahBins ];\n\t\t\t\ttruncatedBins.length = count;\n\n\t\t\t\t// set the candidates\n\t\t\t\tlet b = 0;\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6, b ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ b ];\n\t\t\t\t\tbin.candidate = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tbin.count = 0;\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tbounds,\n\t\t\t\t\t\tleftCacheBounds,\n\t\t\t\t\t\trightCacheBounds,\n\t\t\t\t\t} = bin;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\trightCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\trightCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tleftCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\tleftCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bounds );\n\n\t\t\t\t}\n\n\t\t\t\ttruncatedBins.sort( binsSort );\n\n\t\t\t\t// remove redundant splits\n\t\t\t\tlet splitCount = count;\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\twhile ( bi + 1 < splitCount && truncatedBins[ bi + 1 ].candidate === bin.candidate ) {\n\n\t\t\t\t\t\ttruncatedBins.splice( bi + 1, 1 );\n\t\t\t\t\t\tsplitCount --;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// find the appropriate bin for each triangle and expand the bounds.\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst center = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\tif ( center >= bin.candidate ) {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.leftCacheBounds );\n\t\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// expand all the bounds\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\tconst leftCount = bin.count;\n\t\t\t\t\tconst rightCount = count - bin.count;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tconst leftBounds = bin.leftCacheBounds;\n\t\t\t\t\tconst rightBounds = bin.rightCacheBounds;\n\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rightProb = 0;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// reset the bins\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tbin.count = 0;\n\t\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over all center positions\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t\t// considered to be on the right side of the split\n\t\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.bounds );\n\n\t\t\t\t}\n\n\t\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t\t}\n\n\t\t\t\tlet leftCount = 0;\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst binCount = bin.count;\n\t\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t\t// don't do anything with the bounds if the new bounds have no triangles\n\t\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tleftCount += binCount;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tlet rightProb = 0;\n\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\n\n\t}\n\n\treturn { axis, pos };\n\n}\n\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\tlet avg = 0;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t}\n\n\treturn avg / count;\n\n}\n","export class MeshBVHNode {\n\n\tconstructor() {\n\n\t\t// internal nodes have boundingData, left, right, and splitAxis\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\n\n\t\tthis.boundingData = new Float32Array( 6 );\n\n\t}\n\n}\n","/********************************************************/\n/* This file is generated from \"sortUtils.template.js\". */\n/********************************************************/\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t}\n\n\n\t\t\t// swap bounds\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nexport { partition };\n","/********************************************************/\n/* This file is generated from \"sortUtils.template.js\". */\n/********************************************************/\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition_indirect( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\t\t\tlet t = indirectBuffer[ left ];\n\t\t\tindirectBuffer[ left ] = indirectBuffer[ right ];\n\t\t\tindirectBuffer[ right ] = t;\n\n\n\t\t\t// swap bounds\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nexport { partition_indirect };\n","export function IS_LEAF( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n}\n\nexport function OFFSET( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function COUNT( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 14 ];\n\n}\n\nexport function LEFT_NODE( n32 ) {\n\n\treturn n32 + 8;\n\n}\n\nexport function RIGHT_NODE( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function SPLIT_AXIS( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 7 ];\n\n}\n\nexport function BOUNDING_DATA_INDEX( n32 ) {\n\n\treturn n32;\n\n}\n","import { BYTES_PER_NODE, IS_LEAFNODE_FLAG } from '../Constants.js';\nimport { IS_LEAF } from '../utils/nodeBufferUtils.js';\n\nlet float32Array, uint32Array, uint16Array, uint8Array;\nconst MAX_POINTER = Math.pow( 2, 32 );\n\nexport function countNodes( node ) {\n\n\tif ( 'count' in node ) {\n\n\t\treturn 1;\n\n\t} else {\n\n\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t}\n\n}\n\nexport function populateBuffer( byteOffset, node, buffer ) {\n\n\tfloat32Array = new Float32Array( buffer );\n\tuint32Array = new Uint32Array( buffer );\n\tuint16Array = new Uint16Array( buffer );\n\tuint8Array = new Uint8Array( buffer );\n\n\treturn _populateBuffer( byteOffset, node );\n\n}\n\n// pack structure\n// boundingData  \t\t\t\t: 6 float32\n// right / offset \t\t\t\t: 1 uint32\n// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\nfunction _populateBuffer( byteOffset, node ) {\n\n\tconst stride4Offset = byteOffset / 4;\n\tconst stride2Offset = byteOffset / 2;\n\tconst isLeaf = 'count' in node;\n\tconst boundingData = node.boundingData;\n\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t}\n\n\tif ( isLeaf ) {\n\n\t\tif ( node.buffer ) {\n\n\t\t\tconst buffer = node.buffer;\n\t\t\tuint8Array.set( new Uint8Array( buffer ), byteOffset );\n\n\t\t\tfor ( let offset = byteOffset, l = byteOffset + buffer.byteLength; offset < l; offset += BYTES_PER_NODE ) {\n\n\t\t\t\tconst offset2 = offset / 2;\n\t\t\t\tif ( ! IS_LEAF( offset2, uint16Array ) ) {\n\n\t\t\t\t\tuint32Array[ ( offset / 4 ) + 6 ] += stride4Offset;\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn byteOffset + buffer.byteLength;\n\n\t\t} else {\n\n\t\t\tconst offset = node.offset;\n\t\t\tconst count = node.count;\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = node.left;\n\t\tconst right = node.right;\n\t\tconst splitAxis = node.splitAxis;\n\n\t\tlet nextUnusedPointer;\n\t\tnextUnusedPointer = _populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\tif ( ( nextUnusedPointer / 4 ) > MAX_POINTER ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t}\n\n\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\tnextUnusedPointer = _populateBuffer( nextUnusedPointer, right );\n\n\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\treturn nextUnusedPointer;\n\n\t}\n\n}\n","import { ensureIndex, getFullGeometryRange, getRootIndexRanges, getTriCount, hasGroupGaps, } from './geometryUtils.js';\nimport { getBounds, computeTriangleBounds } from './computeBoundsUtils.js';\nimport { getOptimalSplit } from './splitUtils.js';\nimport { MeshBVHNode } from '../MeshBVHNode.js';\nimport { BYTES_PER_NODE } from '../Constants.js';\n\nimport { partition } from './sortUtils.generated.js';\nimport { partition_indirect } from './sortUtils_indirect.generated.js';\nimport { countNodes, populateBuffer } from './buildUtils.js';\n\nexport function generateIndirectBuffer( geometry, useSharedArrayBuffer ) {\n\n\tconst triCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\tconst useUint32 = triCount > 2 ** 16;\n\tconst byteCount = useUint32 ? 4 : 2;\n\n\tconst buffer = useSharedArrayBuffer ? new SharedArrayBuffer( triCount * byteCount ) : new ArrayBuffer( triCount * byteCount );\n\tconst indirectBuffer = useUint32 ? new Uint32Array( buffer ) : new Uint16Array( buffer );\n\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\tindirectBuffer[ i ] = i;\n\n\t}\n\n\treturn indirectBuffer;\n\n}\n\nexport function buildTree( bvh, triangleBounds, offset, count, options ) {\n\n\t// epxand variables\n\tconst {\n\t\tmaxDepth,\n\t\tverbose,\n\t\tmaxLeafTris,\n\t\tstrategy,\n\t\tonProgress,\n\t\tindirect,\n\t} = options;\n\tconst indirectBuffer = bvh._indirectBuffer;\n\tconst geometry = bvh.geometry;\n\tconst indexArray = geometry.index ? geometry.index.array : null;\n\tconst partionFunc = indirect ? partition_indirect : partition;\n\n\t// generate intermediate variables\n\tconst totalTriangles = getTriCount( geometry );\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\tlet reachedMaxDepth = false;\n\n\tconst root = new MeshBVHNode();\n\tgetBounds( triangleBounds, offset, count, root.boundingData, cacheCentroidBoundingData );\n\tsplitNode( root, offset, count, cacheCentroidBoundingData );\n\treturn root;\n\n\tfunction triggerProgress( trianglesProcessed ) {\n\n\t\tif ( onProgress ) {\n\n\t\t\tonProgress( trianglesProcessed / totalTriangles );\n\n\t\t}\n\n\t}\n\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\treachedMaxDepth = true;\n\t\t\tif ( verbose ) {\n\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\tconsole.warn( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// early out if we've met our capacity\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// Find where to split the volume\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\tif ( split.axis === - 1 ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\tconst splitOffset = partionFunc( indirectBuffer, indexArray, triangleBounds, offset, count, split );\n\n\t\t// create the two new child nodes\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\n\t\t} else {\n\n\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t// create the left child and compute its bounding box\n\t\t\tconst left = new MeshBVHNode();\n\t\t\tconst lstart = offset;\n\t\t\tconst lcount = splitOffset - offset;\n\t\t\tnode.left = left;\n\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t// repeat for right\n\t\t\tconst right = new MeshBVHNode();\n\t\t\tconst rstart = splitOffset;\n\t\t\tconst rcount = count - lcount;\n\t\t\tnode.right = right;\n\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nexport function buildPackedTree( bvh, options ) {\n\n\tconst geometry = bvh.geometry;\n\tif ( options.indirect ) {\n\n\t\tbvh._indirectBuffer = generateIndirectBuffer( geometry, options.useSharedArrayBuffer );\n\n\t\tif ( hasGroupGaps( geometry, options.range ) && ! options.verbose ) {\n\n\t\t\tconsole.warn(\n\t\t\t\t'MeshBVH: Provided geometry contains groups or a range that do not fully span the vertex contents while using the \"indirect\" option. ' +\n\t\t\t\t'BVH may incorrectly report intersections on unrendered portions of the geometry.'\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tif ( ! bvh._indirectBuffer ) {\n\n\t\tensureIndex( geometry, options );\n\n\t}\n\n\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\n\tconst triangleBounds = computeTriangleBounds( geometry );\n\tconst geometryRanges = options.indirect ? getFullGeometryRange( geometry, options.range ) : getRootIndexRanges( geometry, options.range );\n\tbvh._roots = geometryRanges.map( range => {\n\n\t\tconst root = buildTree( bvh, triangleBounds, range.offset, range.count, options );\n\t\tconst nodeCount = countNodes( root );\n\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\n\t\tpopulateBuffer( 0, root, buffer );\n\t\treturn buffer;\n\n\t} );\n\n}\n","import { Vector3 } from 'three';\n\nexport class SeparatingAxisBounds {\n\n\tconstructor() {\n\n\t\tthis.min = Infinity;\n\t\tthis.max = - Infinity;\n\n\t}\n\n\tsetFromPointsField( points, field ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = p[ field ];\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tsetFromPoints( axis, points ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = axis.dot( p );\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tisSeparated( other ) {\n\n\t\treturn this.min > other.max || other.min > this.max;\n\n\t}\n\n}\n\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\n\n\tconst p = new Vector3();\n\treturn function setFromBox( axis, box ) {\n\n\t\tconst boxMin = box.min;\n\t\tconst boxMax = box.max;\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\n\n\t\t\t\t\tconst val = axis.dot( p );\n\t\t\t\t\tmin = Math.min( val, min );\n\t\t\t\t\tmax = Math.max( val, max );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t};\n\n} )();\n\nexport const areIntersecting = ( function () {\n\n\tconst cacheSatBounds = new SeparatingAxisBounds();\n\treturn function areIntersecting( shape1, shape2 ) {\n\n\t\tconst points1 = shape1.points;\n\t\tconst satAxes1 = shape1.satAxes;\n\t\tconst satBounds1 = shape1.satBounds;\n\n\t\tconst points2 = shape2.points;\n\t\tconst satAxes2 = shape2.satAxes;\n\t\tconst satBounds2 = shape2.satBounds;\n\n\t\t// check axes of the first shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds1[ i ];\n\t\t\tconst sa = satAxes1[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check axes of the second shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds2[ i ];\n\t\t\tconst sa = satAxes2[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t};\n\n} )();\n","import { Vector3, Vector2, Plane, Line3 } from 'three';\n\nexport const closestPointLineToLine = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst v02 = new Vector3();\n\treturn function closestPointLineToLine( l1, l2, result ) {\n\n\t\tconst v0 = l1.start;\n\t\tconst v10 = dir1;\n\t\tconst v2 = l2.start;\n\t\tconst v32 = dir2;\n\n\t\tv02.subVectors( v0, v2 );\n\t\tdir1.subVectors( l1.end, l1.start );\n\t\tdir2.subVectors( l2.end, l2.start );\n\n\t\t// float d0232 = v02.Dot(v32);\n\t\tconst d0232 = v02.dot( v32 );\n\n\t\t// float d3210 = v32.Dot(v10);\n\t\tconst d3210 = v32.dot( v10 );\n\n\t\t// float d3232 = v32.Dot(v32);\n\t\tconst d3232 = v32.dot( v32 );\n\n\t\t// float d0210 = v02.Dot(v10);\n\t\tconst d0210 = v02.dot( v10 );\n\n\t\t// float d1010 = v10.Dot(v10);\n\t\tconst d1010 = v10.dot( v10 );\n\n\t\t// float denom = d1010*d3232 - d3210*d3210;\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\n\n\t\tlet d, d2;\n\t\tif ( denom !== 0 ) {\n\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\n\n\t\t} else {\n\n\t\t\td = 0;\n\n\t\t}\n\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\n\n\t\tresult.x = d;\n\t\tresult.y = d2;\n\n\t};\n\n} )();\n\nexport const closestPointsSegmentToSegment = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n\tconst paramResult = new Vector2();\n\tconst temp1 = new Vector3();\n\tconst temp2 = new Vector3();\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\n\n\t\tclosestPointLineToLine( l1, l2, paramResult );\n\n\t\tlet d = paramResult.x;\n\t\tlet d2 = paramResult.y;\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\n\n\t\t\tl1.at( d, target1 );\n\t\t\tl2.at( d2, target2 );\n\n\t\t\treturn;\n\n\t\t} else if ( d >= 0 && d <= 1 ) {\n\n\t\t\t// Only d2 is out of bounds.\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tl2.at( 0, target2 );\n\n\t\t\t} else {\n\n\t\t\t\tl2.at( 1, target2 );\n\n\t\t\t}\n\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\n\t\t\treturn;\n\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\n\n\t\t\t// Only d is out of bounds.\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tl1.at( 0, target1 );\n\n\t\t\t} else {\n\n\t\t\t\tl1.at( 1, target1 );\n\n\t\t\t}\n\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// Both u and u2 are out of bounds.\n\t\t\tlet p;\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tp = l1.start;\n\n\t\t\t} else {\n\n\t\t\t\tp = l1.end;\n\n\t\t\t}\n\n\t\t\tlet p2;\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tp2 = l2.start;\n\n\t\t\t} else {\n\n\t\t\t\tp2 = l2.end;\n\n\t\t\t}\n\n\t\t\tconst closestPoint = temp1;\n\t\t\tconst closestPoint2 = temp2;\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\n\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\n\n\t\t\t\ttarget1.copy( closestPoint );\n\t\t\t\ttarget2.copy( p2 );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\ttarget1.copy( p );\n\t\t\t\ttarget2.copy( closestPoint2 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n} )();\n\n\nexport const sphereIntersectTriangle = ( function () {\n\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n\tconst closestPointTemp = new Vector3();\n\tconst projectedPointTemp = new Vector3();\n\tconst planeTemp = new Plane();\n\tconst lineTemp = new Line3();\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\n\n\t\tconst { radius, center } = sphere;\n\t\tconst { a, b, c } = triangle;\n\n\t\t// phase 1\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = b;\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = b;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\n\n\t\t// phase 2\n\t\tconst plane = triangle.getPlane( planeTemp );\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\n\t\tif ( dp <= radius ) {\n\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\n\t\t\tconst cp = triangle.containsPoint( pp );\n\t\t\tif ( cp ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n} )();\n","import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\n\nconst ZERO_EPSILON = 1e-15;\nfunction isNearZero( value ) {\n\n\treturn Math.abs( value ) < ZERO_EPSILON;\n\n}\n\nexport class ExtendedTriangle extends Triangle {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.isExtendedTriangle = true;\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.points = [ this.a, this.b, this.c ];\n\t\tthis.sphere = new Sphere();\n\t\tthis.plane = new Plane();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst a = this.a;\n\t\tconst b = this.b;\n\t\tconst c = this.c;\n\t\tconst points = this.points;\n\n\t\tconst satAxes = this.satAxes;\n\t\tconst satBounds = this.satBounds;\n\n\t\tconst axis0 = satAxes[ 0 ];\n\t\tconst sab0 = satBounds[ 0 ];\n\t\tthis.getNormal( axis0 );\n\t\tsab0.setFromPoints( axis0, points );\n\n\t\tconst axis1 = satAxes[ 1 ];\n\t\tconst sab1 = satBounds[ 1 ];\n\t\taxis1.subVectors( a, b );\n\t\tsab1.setFromPoints( axis1, points );\n\n\t\tconst axis2 = satAxes[ 2 ];\n\t\tconst sab2 = satBounds[ 2 ];\n\t\taxis2.subVectors( b, c );\n\t\tsab2.setFromPoints( axis2, points );\n\n\t\tconst axis3 = satAxes[ 3 ];\n\t\tconst sab3 = satBounds[ 3 ];\n\t\taxis3.subVectors( c, a );\n\t\tsab3.setFromPoints( axis3, points );\n\n\t\tthis.sphere.setFromPoints( this.points );\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\tthis.needsUpdate = false;\n\n\t}\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\tconst edge = new Line3();\n\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\tconst { start, end } = segment;\n\t\tconst points = this.points;\n\t\tlet distSq;\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check the triangle edges\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\tedge.start.copy( points[ i ] );\n\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check end points\n\t\tthis.closestPointToPoint( start, point1 );\n\t\tdistSq = start.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t}\n\n\t\tthis.closestPointToPoint( end, point1 );\n\t\tdistSq = end.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri2 = new ExtendedTriangle();\n\tconst arr1 = new Array( 3 );\n\tconst arr2 = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\tconst dir = new Vector3();\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst tempDir = new Vector3();\n\tconst edge = new Line3();\n\tconst edge1 = new Line3();\n\tconst edge2 = new Line3();\n\tconst tempPoint = new Vector3();\n\n\tfunction triIntersectPlane( tri, plane, targetEdge ) {\n\n\t\t// find the edge that intersects the other triangle plane\n\t\tconst points = tri.points;\n\t\tlet count = 0;\n\t\tlet startPointIntersection = - 1;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst { start, end } = edge;\n\t\t\tstart.copy( points[ i ] );\n\t\t\tend.copy( points[ ( i + 1 ) % 3 ] );\n\t\t\tedge.delta( dir );\n\n\t\t\tconst startIntersects = isNearZero( plane.distanceToPoint( start ) );\n\t\t\tif ( isNearZero( plane.normal.dot( dir ) ) && startIntersects ) {\n\n\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\ttargetEdge.copy( edge );\n\t\t\t\tcount = 2;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\tconst doesIntersect = plane.intersectLine( edge, tempPoint );\n\t\t\tif ( ! doesIntersect && startIntersects ) {\n\n\t\t\t\ttempPoint.copy( start );\n\n\t\t\t}\n\n\t\t\t// ignore the end point\n\t\t\tif ( ( doesIntersect || startIntersects ) && ! isNearZero( tempPoint.distanceTo( end ) ) ) {\n\n\t\t\t\tif ( count <= 1 ) {\n\n\t\t\t\t\t// assign to the start or end point and save which index was snapped to\n\t\t\t\t\t// the start point if necessary\n\t\t\t\t\tconst point = count === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\tif ( startIntersects ) {\n\n\t\t\t\t\t\tstartPointIntersection = count;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( count >= 2 ) {\n\n\t\t\t\t\t// if we're here that means that there must have been one point that had\n\t\t\t\t\t// snapped to the start point so replace it here\n\t\t\t\t\tconst point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\tcount = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tcount ++;\n\t\t\t\tif ( count === 2 && startPointIntersection === - 1 ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\treturn function intersectsTriangle( other, target = null, suppressLog = false ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\tsaTri2.copy( other );\n\t\t\tsaTri2.update();\n\t\t\tother = saTri2;\n\n\t\t} else if ( other.needsUpdate ) {\n\n\t\t\tother.update();\n\n\t\t}\n\n\t\tconst plane1 = this.plane;\n\t\tconst plane2 = other.plane;\n\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\tconst satBounds1 = this.satBounds;\n\t\t\tconst satAxes1 = this.satAxes;\n\t\t\tarr2[ 0 ] = other.a;\n\t\t\tarr2[ 1 ] = other.b;\n\t\t\tarr2[ 2 ] = other.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst satBounds2 = other.satBounds;\n\t\t\tconst satAxes2 = other.satAxes;\n\t\t\tarr1[ 0 ] = this.a;\n\t\t\tarr1[ 1 ] = this.b;\n\t\t\tarr1[ 2 ] = this.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( target ) {\n\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\tif ( ! suppressLog ) {\n\n\t\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\t}\n\n\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst count1 = triIntersectPlane( this, plane2, edge1 );\n\t\t\tif ( count1 === 1 && other.containsPoint( edge1.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.end );\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find the other triangles edge that intersects this plane\n\t\t\tconst count2 = triIntersectPlane( other, plane1, edge2 );\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge2.end );\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\tedge1.delta( dir1 );\n\t\t\tedge2.delta( dir2 );\n\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\tlet tmp = edge2.start;\n\t\t\t\tedge2.start = edge2.end;\n\t\t\t\tedge2.end = tmp;\n\n\t\t\t}\n\n\t\t\t// check if the edges are overlapping\n\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\tconst separated1 = e1 < s2;\n\t\t\tconst separated2 = s1 < e2;\n\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// assign the target output\n\t\t\tif ( target ) {\n\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\tconst point = new Vector3();\n\tconst point2 = new Vector3();\n\tconst cornerFields = [ 'a', 'b', 'c' ];\n\tconst line1 = new Line3();\n\tconst line2 = new Line3();\n\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check all point distances\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tlet dist;\n\t\t\tconst field = cornerFields[ i ];\n\t\t\tconst otherVec = other[ field ];\n\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t}\n\n\n\t\t\tconst thisVec = this[ field ];\n\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst f11 = cornerFields[ i ];\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n","import { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\n\nexport class OrientedBox {\n\n\tconstructor( min, max, matrix ) {\n\n\t\tthis.isOrientedBox = true;\n\t\tthis.min = new Vector3();\n\t\tthis.max = new Vector3();\n\t\tthis.matrix = new Matrix4();\n\t\tthis.invMatrix = new Matrix4();\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.needsUpdate = false;\n\n\t\tif ( min ) this.min.copy( min );\n\t\tif ( max ) this.max.copy( max );\n\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t}\n\n\tset( min, max, matrix ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\t\tthis.matrix.copy( matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.min.copy( other.min );\n\t\tthis.max.copy( other.max );\n\t\tthis.matrix.copy( other.matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nOrientedBox.prototype.update = ( function () {\n\n\treturn function update() {\n\n\t\tconst matrix = this.matrix;\n\t\tconst min = this.min;\n\t\tconst max = this.max;\n\n\t\tconst points = this.points;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst minVec = points[ 0 ];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst index = 1 << i;\n\t\t\tconst pi = points[ index ];\n\n\t\t\taxis.subVectors( minVec, pi );\n\t\t\tsb.setFromPoints( axis, points );\n\n\t\t}\n\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\tthis.needsUpdate = false;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsBox = ( function () {\n\n\tconst aabbBounds = new SeparatingAxisBounds();\n\treturn function intersectsBox( box ) {\n\n\t\t// TODO: should this be doing SAT against the AABB?\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\taabbBounds.min = min.x;\n\t\taabbBounds.max = max.x;\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.y;\n\t\taabbBounds.max = max.y;\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.z;\n\t\taabbBounds.max = max.z;\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri = new ExtendedTriangle();\n\tconst pointsArr = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\treturn function intersectsTriangle( triangle ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\tsaTri.copy( triangle );\n\t\t\tsaTri.update();\n\t\t\ttriangle = saTri;\n\n\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\ttriangle.update();\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\n\t\tpointsArr[ 0 ] = triangle.a;\n\t\tpointsArr[ 1 ] = triangle.b;\n\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst sa = satAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\tconst triSatBounds = triangle.satBounds;\n\t\tconst triSatAxes = triangle.satAxes;\n\t\tconst points = this.points;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = triSatBounds[ i ];\n\t\t\tconst sa = triSatAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check crossed axes\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sa1 = satAxes[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\treturn function closestPointToPoint( point, target1 ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\ttarget1\n\t\t\t.copy( point )\n\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t.clamp( this.min, this.max )\n\t\t\t.applyMatrix4( this.matrix );\n\n\t\treturn target1;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToBox = ( function () {\n\n\tconst xyzFields = [ 'x', 'y', 'z' ];\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\t// early out if we find a value below threshold\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tbox.getCenter( point2 );\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tconst threshold2 = threshold * threshold;\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst points = this.points;\n\n\n\t\t// iterate over every edge and compare distances\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check over all these points\n\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate and check all line segment distances\n\t\tlet count = 0;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t// get obb line segments\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t// get aabb line segments\n\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check all the other boxes point\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\tconst l1 = segments1[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n","export class PrimitivePool {\n\n\tconstructor( getNewPrimitive ) {\n\n\t\tthis._getNewPrimitive = getNewPrimitive;\n\t\tthis._primitives = [];\n\n\t}\n\n\tgetPrimitive() {\n\n\t\tconst primitives = this._primitives;\n\t\tif ( primitives.length === 0 ) {\n\n\t\t\treturn this._getNewPrimitive();\n\n\t\t} else {\n\n\t\t\treturn primitives.pop();\n\n\t\t}\n\n\t}\n\n\treleasePrimitive( primitive ) {\n\n\t\tthis._primitives.push( primitive );\n\n\t}\n\n}\n","import { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from './PrimitivePool.js';\n\nclass ExtendedTrianglePoolBase extends PrimitivePool {\n\n\tconstructor() {\n\n\t\tsuper( () => new ExtendedTriangle() );\n\n\t}\n\n}\n\nexport const ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\n","class _BufferStack {\n\n\tconstructor() {\n\n\t\tthis.float32Array = null;\n\t\tthis.uint16Array = null;\n\t\tthis.uint32Array = null;\n\n\t\tconst stack = [];\n\t\tlet prevBuffer = null;\n\t\tthis.setBuffer = buffer => {\n\n\t\t\tif ( prevBuffer ) {\n\n\t\t\t\tstack.push( prevBuffer );\n\n\t\t\t}\n\n\t\t\tprevBuffer = buffer;\n\t\t\tthis.float32Array = new Float32Array( buffer );\n\t\t\tthis.uint16Array = new Uint16Array( buffer );\n\t\t\tthis.uint32Array = new Uint32Array( buffer );\n\n\t\t};\n\n\t\tthis.clearBuffer = () => {\n\n\t\t\tprevBuffer = null;\n\t\t\tthis.float32Array = null;\n\t\t\tthis.uint16Array = null;\n\t\t\tthis.uint32Array = null;\n\n\t\t\tif ( stack.length !== 0 ) {\n\n\t\t\t\tthis.setBuffer( stack.pop() );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\nexport const BufferStack = new _BufferStack();\n","import { Box3 } from 'three';\nimport { CONTAINED } from '../Constants.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../../utils/PrimitivePool.js';\nimport { COUNT, OFFSET, LEFT_NODE, RIGHT_NODE, IS_LEAF, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\nlet _box1, _box2;\nconst boxStack = [];\nconst boxPool = /* @__PURE__ */ new PrimitivePool( () => new Box3() );\n\nexport function shapecast( bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset ) {\n\n\t// setup\n\t_box1 = boxPool.getPrimitive();\n\t_box2 = boxPool.getPrimitive();\n\tboxStack.push( _box1, _box2 );\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\n\tconst result = shapecastTraverse( 0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t// cleanup\n\tBufferStack.clearBuffer();\n\tboxPool.releasePrimitive( _box1 );\n\tboxPool.releasePrimitive( _box2 );\n\tboxStack.pop();\n\tboxStack.pop();\n\n\tconst length = boxStack.length;\n\tif ( length > 0 ) {\n\n\t\t_box2 = boxStack[ length - 1 ];\n\t\t_box1 = boxStack[ length - 2 ];\n\n\t}\n\n\treturn result;\n\n}\n\nfunction shapecastTraverse(\n\tnodeIndex32,\n\tgeometry,\n\tintersectsBoundsFunc,\n\tintersectsRangeFunc,\n\tnodeScoreFunc = null,\n\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\tdepth = 0\n) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, _box1 );\n\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1 );\n\n\t} else {\n\n\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tlet c1 = left;\n\t\tlet c2 = right;\n\n\t\tlet score1, score2;\n\t\tlet box1, box2;\n\t\tif ( nodeScoreFunc ) {\n\n\t\t\tbox1 = _box1;\n\t\t\tbox2 = _box2;\n\n\t\t\t// bounding data is not offset\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\tc1 = right;\n\t\t\t\tc2 = left;\n\n\t\t\t\tconst temp = score1;\n\t\t\t\tscore1 = score2;\n\t\t\t\tscore2 = temp;\n\n\t\t\t\tbox1 = box2;\n\t\t\t\t// box2 is always set before use below\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Check box 1 intersection\n\t\tif ( ! box1 ) {\n\n\t\t\tbox1 = _box1;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t}\n\n\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\tlet c1StopTraversal;\n\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\tconst count = end - offset;\n\n\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1 );\n\n\t\t} else {\n\n\t\t\tc1StopTraversal =\n\t\t\t\tc1Intersection &&\n\t\t\t\tshapecastTraverse(\n\t\t\t\t\tc1,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\tdepth + 1\n\t\t\t\t);\n\n\t\t}\n\n\t\tif ( c1StopTraversal ) return true;\n\n\t\t// Check box 2 intersection\n\t\t// cached box2 will have been overwritten by previous traversal\n\t\tbox2 = _box2;\n\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\tlet c2StopTraversal;\n\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\tconst count = end - offset;\n\n\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2 );\n\n\t\t} else {\n\n\t\t\tc2StopTraversal =\n\t\t\t\tc2Intersection &&\n\t\t\t\tshapecastTraverse(\n\t\t\t\t\tc2,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\tdepth + 1\n\t\t\t\t);\n\n\t\t}\n\n\t\tif ( c2StopTraversal ) return true;\n\n\t\treturn false;\n\n\t\t// Define these inside the function so it has access to the local variables needed\n\t\t// when converting to the buffer equivalents\n\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t}\n\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t// adjust offset to point to the right node\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\t// return the end offset of the triangle range\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t}\n\n\t}\n\n}\n","import { Vector3 } from 'three';\n\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1 = /* @__PURE__ */ new Vector3();\n\nexport function closestPointToPoint(\n\tbvh,\n\tpoint,\n\ttarget = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\t// early out if under minThreshold\n\t// skip checking if over maxThreshold\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t// returns Infinity if no value found\n\tconst minThresholdSq = minThreshold * minThreshold;\n\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\tlet closestDistanceSq = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tbvh.shapecast(\n\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t},\n\n\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\ttemp1.copy( temp );\n\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tif ( closestDistanceSq === Infinity ) return null;\n\n\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\tif ( ! target.point ) target.point = temp1.clone();\n\telse target.point.copy( temp1 );\n\ttarget.distance = closestDistance,\n\ttarget.faceIndex = closestDistanceTriIndex;\n\n\treturn target;\n\n}\n","import { Vector3, Vector2, Triangle, DoubleSide, BackSide, REVISION } from 'three';\n\nconst IS_GT_REVISION_169 = parseInt( REVISION ) >= 169;\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst _vA = /* @__PURE__ */ new Vector3();\nconst _vB = /* @__PURE__ */ new Vector3();\nconst _vC = /* @__PURE__ */ new Vector3();\n\nconst _uvA = /* @__PURE__ */ new Vector2();\nconst _uvB = /* @__PURE__ */ new Vector2();\nconst _uvC = /* @__PURE__ */ new Vector2();\n\nconst _normalA = /* @__PURE__ */ new Vector3();\nconst _normalB = /* @__PURE__ */ new Vector3();\nconst _normalC = /* @__PURE__ */ new Vector3();\n\nconst _intersectionPoint = /* @__PURE__ */ new Vector3();\nfunction checkIntersection( ray, pA, pB, pC, point, side, near, far ) {\n\n\tlet intersect;\n\tif ( side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tconst distance = ray.origin.distanceTo( point );\n\n\tif ( distance < near || distance > far ) return null;\n\n\treturn {\n\n\t\tdistance: distance,\n\t\tpoint: point.clone(),\n\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side, near, far ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tconst intersection = checkIntersection( ray, _vA, _vB, _vC, _intersectionPoint, side, near, far );\n\n\tif ( intersection ) {\n\n\t\tconst barycoord = new Vector3();\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA, _vB, _vC, barycoord );\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv1, a );\n\t\t\t_uvB.fromBufferAttribute( uv1, b );\n\t\t\t_uvC.fromBufferAttribute( uv1, c );\n\n\t\t\tintersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\t_normalA.fromBufferAttribute( normal, a );\n\t\t\t_normalB.fromBufferAttribute( normal, b );\n\t\t\t_normalC.fromBufferAttribute( normal, c );\n\n\t\t\tintersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new Vector3() );\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.faceIndex = a;\n\n\t\tif ( IS_GT_REVISION_169 ) {\n\n\t\t\tintersection.barycoord = barycoord;\n\n\t\t}\n\n\t}\n\n\treturn intersection;\n\n}\n\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri( geo, side, ray, tri, intersections, near, far ) {\n\n\tconst triOffset = tri * 3;\n\tlet a = triOffset + 0;\n\tlet b = triOffset + 1;\n\tlet c = triOffset + 2;\n\n\tconst index = geo.index;\n\tif ( geo.index ) {\n\n\t\ta = index.getX( a );\n\t\tb = index.getX( b );\n\t\tc = index.getX( c );\n\n\t}\n\n\tconst { position, normal, uv, uv1 } = geo.attributes;\n\tconst intersection = checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side, near, far );\n\n\tif ( intersection ) {\n\n\t\tintersection.faceIndex = tri;\n\t\tif ( intersections ) intersections.push( intersection );\n\t\treturn intersection;\n\n\t}\n\n\treturn null;\n\n}\n\nexport { intersectTri };\n","\nimport { Vector2, Vector3, Triangle } from 'three';\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nexport function setTriangle( tri, i, index, pos ) {\n\n\tconst ta = tri.a;\n\tconst tb = tri.b;\n\tconst tc = tri.c;\n\n\tlet i0 = i;\n\tlet i1 = i + 1;\n\tlet i2 = i + 2;\n\tif ( index ) {\n\n\t\ti0 = index.getX( i0 );\n\t\ti1 = index.getX( i1 );\n\t\ti2 = index.getX( i2 );\n\n\t}\n\n\tta.x = pos.getX( i0 );\n\tta.y = pos.getY( i0 );\n\tta.z = pos.getZ( i0 );\n\n\ttb.x = pos.getX( i1 );\n\ttb.y = pos.getY( i1 );\n\ttb.z = pos.getZ( i1 );\n\n\ttc.x = pos.getX( i2 );\n\ttc.y = pos.getY( i2 );\n\ttc.z = pos.getZ( i2 );\n\n}\n\nconst tempV1 = /* @__PURE__ */ new Vector3();\nconst tempV2 = /* @__PURE__ */ new Vector3();\nconst tempV3 = /* @__PURE__ */ new Vector3();\nconst tempUV1 = /* @__PURE__ */ new Vector2();\nconst tempUV2 = /* @__PURE__ */ new Vector2();\nconst tempUV3 = /* @__PURE__ */ new Vector2();\n\nexport function getTriangleHitPointInfo( point, geometry, triangleIndex, target ) {\n\n\tconst indices = geometry.getIndex().array;\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst uvs = geometry.getAttribute( 'uv' );\n\n\tconst a = indices[ triangleIndex * 3 ];\n\tconst b = indices[ triangleIndex * 3 + 1 ];\n\tconst c = indices[ triangleIndex * 3 + 2 ];\n\n\ttempV1.fromBufferAttribute( positions, a );\n\ttempV2.fromBufferAttribute( positions, b );\n\ttempV3.fromBufferAttribute( positions, c );\n\n\t// find the associated material index\n\tlet materialIndex = 0;\n\tconst groups = geometry.groups;\n\tconst firstVertexIndex = triangleIndex * 3;\n\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\t\tconst { start, count } = group;\n\t\tif ( firstVertexIndex >= start && firstVertexIndex < start + count ) {\n\n\t\t\tmaterialIndex = group.materialIndex;\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// extract barycoord\n\tconst barycoord = target && target.barycoord ? target.barycoord : new Vector3();\n\tTriangle.getBarycoord( point, tempV1, tempV2, tempV3, barycoord );\n\n\t// extract uvs\n\tlet uv = null;\n\tif ( uvs ) {\n\n\t\ttempUV1.fromBufferAttribute( uvs, a );\n\t\ttempUV2.fromBufferAttribute( uvs, b );\n\t\ttempUV3.fromBufferAttribute( uvs, c );\n\n\t\tif ( target && target.uv ) uv = target.uv;\n\t\telse uv = new Vector2();\n\n\t\tTriangle.getInterpolation( point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv );\n\n\t}\n\n\t// adjust the provided target or create a new one\n\tif ( target ) {\n\n\t\tif ( ! target.face ) target.face = { };\n\t\ttarget.face.a = a;\n\t\ttarget.face.b = b;\n\t\ttarget.face.c = c;\n\t\ttarget.face.materialIndex = materialIndex;\n\t\tif ( ! target.face.normal ) target.face.normal = new Vector3();\n\t\tTriangle.getNormal( tempV1, tempV2, tempV3, target.face.normal );\n\n\t\tif ( uv ) target.uv = uv;\n\t\ttarget.barycoord = barycoord;\n\n\t\treturn target;\n\n\t} else {\n\n\t\treturn {\n\t\t\tface: {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\tnormal: Triangle.getNormal( tempV1, tempV2, tempV3, new Vector3() )\n\t\t\t},\n\t\t\tuv: uv,\n\t\t\tbarycoord: barycoord,\n\t\t};\n\n\t}\n\n}\n","import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris( bvh, side, ray, offset, count, intersections, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\n\t\tintersectTri( geometry, side, ray, i, intersections, near, far );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri( bvh, side, ray, offset, count, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\n\t\tintersection = intersectTri( geometry, side, ray, i, null, near, far );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\n\t\ttri = i;\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri, intersectTris, iterateOverTriangles };\n","import { IS_LEAFNODE_FLAG } from '../Constants.js';\n\n/****************************************************/\n/* This file is generated from \"refit.template.js\". */\n/****************************************************/\n\nfunction refit( bvh, nodeIndices = null ) {\n\n\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\tnodeIndices = new Set( nodeIndices );\n\n\t}\n\n\tconst geometry = bvh.geometry;\n\tconst indexArr = geometry.index ? geometry.index.array : null;\n\tconst posAttr = geometry.attributes.position;\n\n\tlet buffer, uint32Array, uint16Array, float32Array;\n\tlet byteOffset = 0;\n\tconst roots = bvh._roots;\n\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\tbuffer = roots[ i ];\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t_traverse( 0, byteOffset );\n\t\tbyteOffset += buffer.byteLength;\n\n\t}\n\n\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\tconst node16Index = node32Index * 2;\n\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\tlet minx = Infinity;\n\t\t\tlet miny = Infinity;\n\t\t\tlet minz = Infinity;\n\t\t\tlet maxx = - Infinity;\n\t\t\tlet maxy = - Infinity;\n\t\t\tlet maxz = - Infinity;\n\n\n\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\tlet index = indexArr[ i ];\n\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t}\n\n\n\t\t\tif (\n\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t) {\n\n\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = node32Index + 8;\n\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\tconst offsetRight = right + byteOffset;\n\t\t\tlet forceChildren = force;\n\t\t\tlet includesLeft = false;\n\t\t\tlet includesRight = false;\n\n\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tincludesLeft = true;\n\t\t\t\tincludesRight = true;\n\n\t\t\t}\n\n\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\tlet leftChange = false;\n\t\t\tif ( traverseLeft ) {\n\n\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tlet rightChange = false;\n\t\t\tif ( traverseRight ) {\n\n\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tconst didChange = leftChange || rightChange;\n\t\t\tif ( didChange ) {\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn didChange;\n\n\t\t}\n\n\t}\n\n}\n\nexport { refit };\n","/**\n * This function performs intersection tests similar to Ray.intersectBox in three.js,\n * with the difference that the box values are read from an array to improve performance.\n */\nexport function intersectRay( nodeIndex32, array, ray, near, far ) {\n\n\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\tconst invdirx = 1 / ray.direction.x,\n\t\tinvdiry = 1 / ray.direction.y,\n\t\tinvdirz = 1 / ray.direction.z;\n\n\tconst ox = ray.origin.x;\n\tconst oy = ray.origin.y;\n\tconst oz = ray.origin.z;\n\n\tlet minx = array[ nodeIndex32 ];\n\tlet maxx = array[ nodeIndex32 + 3 ];\n\n\tlet miny = array[ nodeIndex32 + 1 ];\n\tlet maxy = array[ nodeIndex32 + 3 + 1 ];\n\n\tlet minz = array[ nodeIndex32 + 2 ];\n\tlet maxz = array[ nodeIndex32 + 3 + 2 ];\n\n\tif ( invdirx >= 0 ) {\n\n\t\ttmin = ( minx - ox ) * invdirx;\n\t\ttmax = ( maxx - ox ) * invdirx;\n\n\t} else {\n\n\t\ttmin = ( maxx - ox ) * invdirx;\n\t\ttmax = ( minx - ox ) * invdirx;\n\n\t}\n\n\tif ( invdiry >= 0 ) {\n\n\t\ttymin = ( miny - oy ) * invdiry;\n\t\ttymax = ( maxy - oy ) * invdiry;\n\n\t} else {\n\n\t\ttymin = ( maxy - oy ) * invdiry;\n\t\ttymax = ( miny - oy ) * invdiry;\n\n\t}\n\n\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return false;\n\n\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\tif ( invdirz >= 0 ) {\n\n\t\ttzmin = ( minz - oz ) * invdirz;\n\t\ttzmax = ( maxz - oz ) * invdirz;\n\n\t} else {\n\n\t\ttzmin = ( maxz - oz ) * invdirz;\n\t\ttzmax = ( minz - oz ) * invdirz;\n\n\t}\n\n\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return false;\n\n\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t//return point closest to the ray (positive side)\n\n\treturn tmin <= far && tmax >= near;\n\n}\n","import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris_indirect( bvh, side, ray, offset, count, intersections, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet vi = _indirectBuffer ? _indirectBuffer[ i ] : i;\n\t\tintersectTri( geometry, side, ray, vi, intersections, near, far );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri_indirect( bvh, side, ray, offset, count, near, far ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\t\tintersection = intersectTri( geometry, side, ray, _indirectBuffer ? _indirectBuffer[ i ] : i, null, near, far );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles_indirect(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\t\ttri = bvh.resolveTriangleIndex( i );\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri_indirect, intersectTris_indirect, iterateOverTriangles_indirect };\n","import { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectTris } from '../utils/iterationUtils.generated.js';\nimport '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nfunction raycast( bvh, root, side, ray, intersects, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects, near, far );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\tintersectTris( bvh, side, ray, offset, count, intersects, near, far );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast };\n","import { IS_LEAF, OFFSET, COUNT, SPLIT_AXIS, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { intersectClosestTri } from '../utils/iterationUtils.generated.js';\nimport '../utils/iterationUtils_indirect.generated.js';\n\n/***********************************************************/\n/* This file is generated from \"raycastFirst.template.js\". */\n/***********************************************************/\n\nconst _xyzFields = [ 'x', 'y', 'z' ];\n\nfunction raycastFirst( bvh, root, side, ray, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _raycastFirst( 0, bvh, side, ray, near, far );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _raycastFirst( nodeIndex32, bvh, side, ray, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\t// eslint-disable-next-line no-unreachable\n\t\treturn intersectClosestTri( bvh, side, ray, offset, count, near, far );\n\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, near, far );\n\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray, near, far ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, near, far );\n\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray, near, far ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycastFirst };\n","import { Box3, Matrix4 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../../math/ExtendedTriangle.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { IS_LEAF, OFFSET, COUNT, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\n/*****************************************************************/\n/* This file is generated from \"intersectsGeometry.template.js\". */\n/*****************************************************************/\n/* eslint-disable indent */\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\n\nfunction intersectsGeometry( bvh, root, otherGeometry, geometryToBvh ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tif ( cachedObb === null ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tcachedObb = obb;\n\n\t}\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst thisGeometry = bvh.geometry;\n\t\tconst thisIndex = thisGeometry.index;\n\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\tconst index = otherGeometry.index;\n\t\tconst pos = otherGeometry.attributes.position;\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t// here.\n\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t// if there's a bounds tree\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\tobb2.needsUpdate = true;\n\n\t\t\t// TODO: use a triangle iteration function here\n\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.needsUpdate = true;\n\n\n\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn res;\n\n\t\t} else {\n\n\t\t\t// if we're just dealing with raw geometry\n\n\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\n\n\n\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = nodeIndex32 + 8;\n\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\tconst leftIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( leftIntersection ) return true;\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\tconst rightIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( rightIntersection ) return true;\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport { intersectsGeometry };\n","import { Matrix4, Vector3 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { getTriCount } from '../build/geometryUtils.js';\nimport { ExtendedTrianglePool } from '../../utils/ExtendedTrianglePool.js';\n\n/*********************************************************************/\n/* This file is generated from \"closestPointToGeometry.template.js\". */\n/*********************************************************************/\n\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\n\nfunction closestPointToGeometry(\n\tbvh,\n\totherGeometry,\n\tgeometryToBvh,\n\ttarget1 = { },\n\ttarget2 = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\tif ( ! otherGeometry.boundingBox ) {\n\n\t\totherGeometry.computeBoundingBox();\n\n\t}\n\n\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\tobb.needsUpdate = true;\n\n\tconst geometry = bvh.geometry;\n\tconst pos = geometry.attributes.position;\n\tconst index = geometry.index;\n\tconst otherPos = otherGeometry.attributes.position;\n\tconst otherIndex = otherGeometry.index;\n\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\tlet tempTarget1 = temp1;\n\tlet tempTargetDest1 = temp2;\n\tlet tempTarget2 = null;\n\tlet tempTargetDest2 = null;\n\n\tif ( target2 ) {\n\n\t\ttempTarget2 = temp3;\n\t\ttempTargetDest2 = temp4;\n\n\t}\n\n\tlet closestDistance = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tlet closestDistanceOtherTriIndex = null;\n\ttempMatrix.copy( geometryToBvh ).invert();\n\tobb2.matrix.copy( tempMatrix );\n\tbvh.shapecast(\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tExtendedTrianglePool.releasePrimitive( triangle );\n\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\tif ( closestDistance === Infinity ) {\n\n\t\treturn null;\n\n\t}\n\n\tif ( ! target1.point ) {\n\n\t\ttarget1.point = tempTargetDest1.clone();\n\n\t} else {\n\n\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t}\n\n\ttarget1.distance = closestDistance,\n\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\tif ( target2 ) {\n\n\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\telse target2.point.copy( tempTargetDest2 );\n\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t}\n\n\treturn target1;\n\n}\n\nexport { closestPointToGeometry };\n","import { IS_LEAFNODE_FLAG } from '../Constants.js';\n\n/****************************************************/\n/* This file is generated from \"refit.template.js\". */\n/****************************************************/\n\nfunction refit_indirect( bvh, nodeIndices = null ) {\n\n\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\tnodeIndices = new Set( nodeIndices );\n\n\t}\n\n\tconst geometry = bvh.geometry;\n\tconst indexArr = geometry.index ? geometry.index.array : null;\n\tconst posAttr = geometry.attributes.position;\n\n\tlet buffer, uint32Array, uint16Array, float32Array;\n\tlet byteOffset = 0;\n\tconst roots = bvh._roots;\n\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\tbuffer = roots[ i ];\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t_traverse( 0, byteOffset );\n\t\tbyteOffset += buffer.byteLength;\n\n\t}\n\n\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\tconst node16Index = node32Index * 2;\n\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\tlet minx = Infinity;\n\t\t\tlet miny = Infinity;\n\t\t\tlet minz = Infinity;\n\t\t\tlet maxx = - Infinity;\n\t\t\tlet maxy = - Infinity;\n\t\t\tlet maxz = - Infinity;\n\n\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\tconst t = 3 * bvh.resolveTriangleIndex( i );\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tlet index = t + j;\n\t\t\t\t\tindex = indexArr ? indexArr[ index ] : index;\n\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (\n\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t) {\n\n\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = node32Index + 8;\n\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\tconst offsetRight = right + byteOffset;\n\t\t\tlet forceChildren = force;\n\t\t\tlet includesLeft = false;\n\t\t\tlet includesRight = false;\n\n\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tincludesLeft = true;\n\t\t\t\tincludesRight = true;\n\n\t\t\t}\n\n\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\tlet leftChange = false;\n\t\t\tif ( traverseLeft ) {\n\n\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tlet rightChange = false;\n\t\t\tif ( traverseRight ) {\n\n\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tconst didChange = leftChange || rightChange;\n\t\t\tif ( didChange ) {\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn didChange;\n\n\t\t}\n\n\t}\n\n}\n\nexport { refit_indirect };\n","import { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectTris_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nfunction raycast_indirect( bvh, root, side, ray, intersects, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects, near, far );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris_indirect( bvh, side, ray, offset, count, intersects, near, far );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, near, far ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects, near, far );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast_indirect };\n","import { IS_LEAF, OFFSET, COUNT, SPLIT_AXIS, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectClosestTri_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/***********************************************************/\n/* This file is generated from \"raycastFirst.template.js\". */\n/***********************************************************/\n\nconst _xyzFields = [ 'x', 'y', 'z' ];\n\nfunction raycastFirst_indirect( bvh, root, side, ray, near, far ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _raycastFirst( 0, bvh, side, ray, near, far );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _raycastFirst( nodeIndex32, bvh, side, ray, near, far ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\treturn intersectClosestTri_indirect( bvh, side, ray, offset, count, near, far );\n\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, near, far );\n\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray, near, far ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, near, far );\n\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray, near, far ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycastFirst_indirect };\n","import { Box3, Matrix4 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../../math/ExtendedTriangle.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { IS_LEAF, OFFSET, COUNT, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\n/*****************************************************************/\n/* This file is generated from \"intersectsGeometry.template.js\". */\n/*****************************************************************/\n/* eslint-disable indent */\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\n\nfunction intersectsGeometry_indirect( bvh, root, otherGeometry, geometryToBvh ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tif ( cachedObb === null ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tcachedObb = obb;\n\n\t}\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst thisGeometry = bvh.geometry;\n\t\tconst thisIndex = thisGeometry.index;\n\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\tconst index = otherGeometry.index;\n\t\tconst pos = otherGeometry.attributes.position;\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t// here.\n\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t// if there's a bounds tree\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\tobb2.needsUpdate = true;\n\n\t\t\t// TODO: use a triangle iteration function here\n\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * bvh.resolveTriangleIndex( i ), thisIndex, thisPos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn res;\n\n\t\t} else {\n\n\t\t\t// if we're just dealing with raw geometry\n\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\tsetTriangle( triangle, 3 * ti, thisIndex, thisPos );\n\n\n\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = nodeIndex32 + 8;\n\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\tconst leftIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( leftIntersection ) return true;\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\tconst rightIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( rightIntersection ) return true;\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport { intersectsGeometry_indirect };\n","import { Matrix4, Vector3 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { getTriCount } from '../build/geometryUtils.js';\nimport { ExtendedTrianglePool } from '../../utils/ExtendedTrianglePool.js';\n\n/*********************************************************************/\n/* This file is generated from \"closestPointToGeometry.template.js\". */\n/*********************************************************************/\n\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\n\nfunction closestPointToGeometry_indirect(\n\tbvh,\n\totherGeometry,\n\tgeometryToBvh,\n\ttarget1 = { },\n\ttarget2 = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\tif ( ! otherGeometry.boundingBox ) {\n\n\t\totherGeometry.computeBoundingBox();\n\n\t}\n\n\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\tobb.needsUpdate = true;\n\n\tconst geometry = bvh.geometry;\n\tconst pos = geometry.attributes.position;\n\tconst index = geometry.index;\n\tconst otherPos = otherGeometry.attributes.position;\n\tconst otherIndex = otherGeometry.index;\n\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\tlet tempTarget1 = temp1;\n\tlet tempTargetDest1 = temp2;\n\tlet tempTarget2 = null;\n\tlet tempTargetDest2 = null;\n\n\tif ( target2 ) {\n\n\t\ttempTarget2 = temp3;\n\t\ttempTargetDest2 = temp4;\n\n\t}\n\n\tlet closestDistance = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tlet closestDistanceOtherTriIndex = null;\n\ttempMatrix.copy( geometryToBvh ).invert();\n\tobb2.matrix.copy( tempMatrix );\n\tbvh.shapecast(\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * ti2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tExtendedTrianglePool.releasePrimitive( triangle );\n\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\tif ( closestDistance === Infinity ) {\n\n\t\treturn null;\n\n\t}\n\n\tif ( ! target1.point ) {\n\n\t\ttarget1.point = tempTargetDest1.clone();\n\n\t} else {\n\n\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t}\n\n\ttarget1.distance = closestDistance,\n\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\tif ( target2 ) {\n\n\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\telse target2.point.copy( tempTargetDest2 );\n\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t}\n\n\treturn target1;\n\n}\n\nexport { closestPointToGeometry_indirect };\n","export function isSharedArrayBufferSupported() {\n\n\treturn typeof SharedArrayBuffer !== 'undefined';\n\n}\n\nexport function convertToBufferType( array, BufferConstructor ) {\n\n\tif ( array === null ) {\n\n\t\treturn array;\n\n\t} else if ( array.buffer ) {\n\n\t\tconst buffer = array.buffer;\n\t\tif ( buffer.constructor === BufferConstructor ) {\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tconst ArrayConstructor = array.constructor;\n\t\tconst result = new ArrayConstructor( new BufferConstructor( buffer.byteLength ) );\n\t\tresult.set( array );\n\t\treturn result;\n\n\t} else {\n\n\t\tif ( array.constructor === BufferConstructor ) {\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tconst result = new BufferConstructor( array.byteLength );\n\t\tnew Uint8Array( result ).set( new Uint8Array( array ) );\n\t\treturn result;\n\n\t}\n\n}\n","import { Box3, Matrix4 } from 'three';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { BOUNDING_DATA_INDEX, COUNT, IS_LEAF, LEFT_NODE, OFFSET, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../../utils/PrimitivePool.js';\n\nconst _bufferStack1 = new BufferStack.constructor();\nconst _bufferStack2 = new BufferStack.constructor();\nconst _boxPool = new PrimitivePool( () => new Box3() );\nconst _leftBox1 = new Box3();\nconst _rightBox1 = new Box3();\n\nconst _leftBox2 = new Box3();\nconst _rightBox2 = new Box3();\n\nlet _active = false;\n\nexport function bvhcast( bvh, otherBvh, matrixToLocal, intersectsRanges ) {\n\n\tif ( _active ) {\n\n\t\tthrow new Error( 'MeshBVH: Recursive calls to bvhcast not supported.' );\n\n\t}\n\n\t_active = true;\n\n\tconst roots = bvh._roots;\n\tconst otherRoots = otherBvh._roots;\n\tlet result;\n\tlet offset1 = 0;\n\tlet offset2 = 0;\n\tconst invMat = new Matrix4().copy( matrixToLocal ).invert();\n\n\t// iterate over the first set of roots\n\tfor ( let i = 0, il = roots.length; i < il; i ++ ) {\n\n\t\t_bufferStack1.setBuffer( roots[ i ] );\n\t\toffset2 = 0;\n\n\t\t// prep the initial root box\n\t\tconst localBox = _boxPool.getPrimitive();\n\t\tarrayToBox( BOUNDING_DATA_INDEX( 0 ), _bufferStack1.float32Array, localBox );\n\t\tlocalBox.applyMatrix4( invMat );\n\n\t\t// iterate over the second set of roots\n\t\tfor ( let j = 0, jl = otherRoots.length; j < jl; j ++ ) {\n\n\t\t\t_bufferStack2.setBuffer( otherRoots[ j ] );\n\n\t\t\tresult = _traverse(\n\t\t\t\t0, 0, matrixToLocal, invMat, intersectsRanges,\n\t\t\t\toffset1, offset2, 0, 0,\n\t\t\t\tlocalBox,\n\t\t\t);\n\n\t\t\t_bufferStack2.clearBuffer();\n\t\t\toffset2 += otherRoots[ j ].length;\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// release stack info\n\t\t_boxPool.releasePrimitive( localBox );\n\t\t_bufferStack1.clearBuffer();\n\t\toffset1 += roots[ i ].length;\n\n\t\tif ( result ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t_active = false;\n\treturn result;\n\n}\n\nfunction _traverse(\n\tnode1Index32,\n\tnode2Index32,\n\tmatrix2to1,\n\tmatrix1to2,\n\tintersectsRangesFunc,\n\n\t// offsets for ids\n\tnode1IndexByteOffset = 0,\n\tnode2IndexByteOffset = 0,\n\n\t// tree depth\n\tdepth1 = 0,\n\tdepth2 = 0,\n\n\tcurrBox = null,\n\treversed = false,\n\n) {\n\n\t// get the buffer stacks associated with the current indices\n\tlet bufferStack1, bufferStack2;\n\tif ( reversed ) {\n\n\t\tbufferStack1 = _bufferStack2;\n\t\tbufferStack2 = _bufferStack1;\n\n\t} else {\n\n\t\tbufferStack1 = _bufferStack1;\n\t\tbufferStack2 = _bufferStack2;\n\n\t}\n\n\t// get the local instances of the typed buffers\n\tconst\n\t\tfloat32Array1 = bufferStack1.float32Array,\n\t\tuint32Array1 = bufferStack1.uint32Array,\n\t\tuint16Array1 = bufferStack1.uint16Array,\n\t\tfloat32Array2 = bufferStack2.float32Array,\n\t\tuint32Array2 = bufferStack2.uint32Array,\n\t\tuint16Array2 = bufferStack2.uint16Array;\n\n\tconst node1Index16 = node1Index32 * 2;\n\tconst node2Index16 = node2Index32 * 2;\n\tconst isLeaf1 = IS_LEAF( node1Index16, uint16Array1 );\n\tconst isLeaf2 = IS_LEAF( node2Index16, uint16Array2 );\n\tlet result = false;\n\tif ( isLeaf2 && isLeaf1 ) {\n\n\t\t// if both bounds are leaf nodes then fire the callback if the boxes intersect\n\t\tif ( reversed ) {\n\n\t\t\tresult = intersectsRangesFunc(\n\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tresult = intersectsRangesFunc(\n\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t);\n\n\t\t}\n\n\t} else if ( isLeaf2 ) {\n\n\t\t// SWAP\n\t\t// If we've traversed to the leaf node on the other bvh then we need to swap over\n\t\t// to traverse down the first one\n\n\t\t// get the new box to use\n\t\tconst newBox = _boxPool.getPrimitive();\n\t\tarrayToBox( BOUNDING_DATA_INDEX( node2Index32 ), float32Array2, newBox );\n\t\tnewBox.applyMatrix4( matrix2to1 );\n\n\t\t// get the child bounds to check before traversal\n\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\tresult = (\n\t\t\tintersectCl1 && _traverse(\n\t\t\t\tnode2Index32, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\tnewBox, ! reversed,\n\t\t\t)\n\t\t) || (\n\t\t\tintersectCr1 && _traverse(\n\t\t\t\tnode2Index32, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\tnewBox, ! reversed,\n\t\t\t)\n\t\t);\n\n\t\t_boxPool.releasePrimitive( newBox );\n\n\t} else {\n\n\t\t// if neither are leaves then we should swap if one of the children does not\n\t\t// intersect with the current bounds\n\n\t\t// get the child bounds to check\n\t\tconst cl2 = LEFT_NODE( node2Index32 );\n\t\tconst cr2 = RIGHT_NODE( node2Index32, uint32Array2 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cl2 ), float32Array2, _leftBox2 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cr2 ), float32Array2, _rightBox2 );\n\n\t\tconst leftIntersects = currBox.intersectsBox( _leftBox2 );\n\t\tconst rightIntersects = currBox.intersectsBox( _rightBox2 );\n\t\tif ( leftIntersects && rightIntersects ) {\n\n\t\t\t// continue to traverse both children if they both intersect\n\t\t\tresult = _traverse(\n\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\tcurrBox, reversed,\n\t\t\t) || _traverse(\n\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\tcurrBox, reversed,\n\t\t\t);\n\n\t\t} else if ( leftIntersects ) {\n\n\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// SWAP\n\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\tnewBox.copy( _leftBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\tresult = (\n\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\tcl2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t) || (\n\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\tcl2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t}\n\n\t\t} else if ( rightIntersects ) {\n\n\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// SWAP\n\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\tnewBox.copy( _rightBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\tresult = (\n\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\tcr2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t) || (\n\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\tcr2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n","import { BufferAttribute, Box3, FrontSide } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG, SKIP_GENERATION } from './Constants.js';\nimport { buildPackedTree } from './build/buildTree.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { ExtendedTrianglePool } from '../utils/ExtendedTrianglePool.js';\nimport { shapecast } from './cast/shapecast.js';\nimport { closestPointToPoint } from './cast/closestPointToPoint.js';\n\nimport { iterateOverTriangles } from './utils/iterationUtils.generated.js';\nimport { refit } from './cast/refit.generated.js';\nimport { raycast } from './cast/raycast.generated.js';\nimport { raycastFirst } from './cast/raycastFirst.generated.js';\nimport { intersectsGeometry } from './cast/intersectsGeometry.generated.js';\nimport { closestPointToGeometry } from './cast/closestPointToGeometry.generated.js';\n\nimport { iterateOverTriangles_indirect } from './utils/iterationUtils_indirect.generated.js';\nimport { refit_indirect } from './cast/refit_indirect.generated.js';\nimport { raycast_indirect } from './cast/raycast_indirect.generated.js';\nimport { raycastFirst_indirect } from './cast/raycastFirst_indirect.generated.js';\nimport { intersectsGeometry_indirect } from './cast/intersectsGeometry_indirect.generated.js';\nimport { closestPointToGeometry_indirect } from './cast/closestPointToGeometry_indirect.generated.js';\nimport { isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\nimport { setTriangle } from '../utils/TriangleUtilities.js';\nimport { bvhcast } from './cast/bvhcast.js';\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst tempBox = /* @__PURE__ */ new Box3();\nexport const DEFAULT_OPTIONS = {\n\tstrategy: CENTER,\n\tmaxDepth: 40,\n\tmaxLeafTris: 10,\n\tuseSharedArrayBuffer: false,\n\tsetBoundingBox: true,\n\tonProgress: null,\n\tindirect: false,\n\tverbose: true,\n\trange: null\n};\n\nexport class MeshBVH {\n\n\tstatic serialize( bvh, options = {} ) {\n\n\t\toptions = {\n\t\t\tcloneBuffers: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst rootData = bvh._roots;\n\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\tconst indexAttribute = geometry.getIndex();\n\t\tlet result;\n\t\tif ( options.cloneBuffers ) {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\tindex: indexAttribute ? indexAttribute.array.slice() : null,\n\t\t\t\tindirectBuffer: indirectBuffer ? indirectBuffer.slice() : null,\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData,\n\t\t\t\tindex: indexAttribute ? indexAttribute.array : null,\n\t\t\t\tindirectBuffer: indirectBuffer,\n\t\t\t};\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\toptions = {\n\t\t\tsetIndex: true,\n\t\t\tindirect: Boolean( data.indirectBuffer ),\n\t\t\t...options,\n\t\t};\n\n\t\tconst { index, roots, indirectBuffer } = data;\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\tbvh._roots = roots;\n\t\tbvh._indirectBuffer = indirectBuffer || null;\n\n\t\tif ( options.setIndex ) {\n\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\n\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvh;\n\n\t}\n\n\tget indirect() {\n\n\t\treturn ! ! this._indirectBuffer;\n\n\t}\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t}\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\t...DEFAULT_OPTIONS,\n\n\t\t\t// undocumented options\n\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t}, options );\n\n\t\tif ( options.useSharedArrayBuffer && ! isSharedArrayBufferSupported() ) {\n\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t}\n\n\t\t// retain references to the geometry so we can use them it without having to\n\t\t// take a geometry reference in every function.\n\t\tthis.geometry = geometry;\n\t\tthis._roots = null;\n\t\tthis._indirectBuffer = null;\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\tbuildPackedTree( this, options );\n\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.resolveTriangleIndex = options.indirect ? i => this._indirectBuffer[ i ] : i => i;\n\n\t}\n\n\trefit( nodeIndices = null ) {\n\n\t\tconst refitFunc = this.indirect ? refit_indirect : refit;\n\t\treturn refitFunc( this, nodeIndices );\n\n\t}\n\n\ttraverse( callback, rootIndex = 0 ) {\n\n\t\tconst buffer = this._roots[ rootIndex ];\n\t\tconst uint32Array = new Uint32Array( buffer );\n\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t_traverse( 0 );\n\n\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: use node functions here\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Core Cast Functions */\n\traycast( ray, materialOrSide = FrontSide, near = 0, far = Infinity ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst intersects = [];\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tconst raycastFunc = this.indirect ? raycast_indirect : raycast;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst startCount = intersects.length;\n\n\t\t\traycastFunc( this, i, materialSide, ray, intersects, near, far );\n\n\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn intersects;\n\n\t}\n\n\traycastFirst( ray, materialOrSide = FrontSide, near = 0, far = Infinity ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tlet closestResult = null;\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tconst raycastFirstFunc = this.indirect ? raycastFirst_indirect : raycastFirst;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst result = raycastFirstFunc( this, i, materialSide, ray, near, far );\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\tclosestResult = result;\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestResult;\n\n\t}\n\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\tlet result = false;\n\t\tconst roots = this._roots;\n\t\tconst intersectsGeometryFunc = this.indirect ? intersectsGeometry_indirect : intersectsGeometry;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tresult = intersectsGeometryFunc( this, i, otherGeometry, geomToMesh );\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tshapecast( callbacks ) {\n\n\t\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\t\tconst iterateFunc = this.indirect ? iterateOverTriangles_indirect : iterateOverTriangles;\n\t\tlet {\n\t\t\tboundsTraverseOrder,\n\t\t\tintersectsBounds,\n\t\t\tintersectsRange,\n\t\t\tintersectsTriangle,\n\t\t} = callbacks;\n\n\t\t// wrap the intersectsRange function\n\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t} else if ( ! intersectsRange ) {\n\n\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\treturn contained;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// run shapecast\n\t\tlet result = false;\n\t\tlet byteOffset = 0;\n\t\tconst roots = this._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst root = roots[ i ];\n\t\t\tresult = shapecast( this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tbyteOffset += root.byteLength;\n\n\t\t}\n\n\t\tExtendedTrianglePool.releasePrimitive( triangle );\n\n\t\treturn result;\n\n\t}\n\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\tlet {\n\t\t\tintersectsRanges,\n\t\t\tintersectsTriangles,\n\t\t} = callbacks;\n\n\t\tconst triangle1 = ExtendedTrianglePool.getPrimitive();\n\t\tconst indexAttr1 = this.geometry.index;\n\t\tconst positionAttr1 = this.geometry.attributes.position;\n\t\tconst assignTriangle1 = this.indirect ?\n\t\t\ti1 => {\n\n\n\t\t\t\tconst ti = this.resolveTriangleIndex( i1 );\n\t\t\t\tsetTriangle( triangle1, ti * 3, indexAttr1, positionAttr1 );\n\n\t\t\t} :\n\t\t\ti1 => {\n\n\t\t\t\tsetTriangle( triangle1, i1 * 3, indexAttr1, positionAttr1 );\n\n\t\t\t};\n\n\t\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\t\tconst indexAttr2 = otherBvh.geometry.index;\n\t\tconst positionAttr2 = otherBvh.geometry.attributes.position;\n\t\tconst assignTriangle2 = otherBvh.indirect ?\n\t\t\ti2 => {\n\n\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\tsetTriangle( triangle2, ti2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t} :\n\t\t\ti2 => {\n\n\t\t\t\tsetTriangle( triangle2, i2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t};\n\n\t\t// generate triangle callback if needed\n\t\tif ( intersectsTriangles ) {\n\n\t\t\tconst iterateOverDoubleTriangles = ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) => {\n\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\tassignTriangle2( i2 );\n\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\tassignTriangle1( i1 );\n\n\t\t\t\t\t\ttriangle1.needsUpdate = true;\n\n\t\t\t\t\t\tif ( intersectsTriangles( triangle1, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvhcast( this, otherBvh, matrixToLocal, intersectsRanges );\n\n\t}\n\n\n\t/* Derived Cast Functions */\n\tintersectsBox( box, boxToMesh ) {\n\n\t\tobb.set( box.min, box.max, boxToMesh );\n\t\tobb.needsUpdate = true;\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\tconst closestPointToGeometryFunc = this.indirect ? closestPointToGeometry_indirect : closestPointToGeometry;\n\t\treturn closestPointToGeometryFunc(\n\t\t\tthis,\n\t\t\totherGeometry,\n\t\t\tgeometryToBvh,\n\t\t\ttarget1,\n\t\t\ttarget2,\n\t\t\tminThreshold,\n\t\t\tmaxThreshold,\n\t\t);\n\n\t}\n\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\treturn closestPointToPoint(\n\t\t\tthis,\n\t\t\tpoint,\n\t\t\ttarget,\n\t\t\tminThreshold,\n\t\t\tmaxThreshold,\n\t\t);\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\ttarget.makeEmpty();\n\n\t\tconst roots = this._roots;\n\t\troots.forEach( buffer => {\n\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\ttarget.union( tempBox );\n\n\t\t} );\n\n\t\treturn target;\n\n\t}\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\treturn hit;\n\n}\n","import { Ray, Matrix4, Mesh, Vector3, Sphere, BatchedMesh, REVISION } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst IS_REVISION_166 = parseInt( REVISION ) >= 166;\nconst ray = /* @__PURE__ */ new Ray();\nconst direction = /* @__PURE__ */ new Vector3();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\nconst origBatchedRaycastFunc = BatchedMesh.prototype.raycast;\nconst _worldScale = /* @__PURE__ */ new Vector3();\nconst _mesh = /* @__PURE__ */ new Mesh();\nconst _batchIntersects = [];\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.isBatchedMesh ) {\n\n\t\tacceleratedBatchedMeshRaycast.call( this, raycaster, intersects );\n\n\t} else {\n\n\t\tacceleratedMeshRaycast.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nfunction acceleratedBatchedMeshRaycast( raycaster, intersects ) {\n\n\tif ( this.boundsTrees ) {\n\n\t\t// TODO: remove use of geometry info, instance info when r170 is minimum version\n\t\tconst boundsTrees = this.boundsTrees;\n\t\tconst drawInfo = this._drawInfo || this._instanceInfo;\n\t\tconst drawRanges = this._drawRanges || this._geometryInfo;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\t_mesh.material = this.material;\n\t\t_mesh.geometry = this.geometry;\n\n\t\tconst oldBoundsTree = _mesh.geometry.boundsTree;\n\t\tconst oldDrawRange = _mesh.geometry.drawRange;\n\n\t\tif ( _mesh.geometry.boundingSphere === null ) {\n\n\t\t\t_mesh.geometry.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\t// TODO: provide new method to get instances count instead of 'drawInfo.length'\n\t\tfor ( let i = 0, l = drawInfo.length; i < l; i ++ ) {\n\n\t\t\tif ( ! this.getVisibleAt( i ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// TODO: use getGeometryIndex\n\t\t\tconst geometryId = drawInfo[ i ].geometryIndex;\n\n\t\t\t_mesh.geometry.boundsTree = boundsTrees[ geometryId ];\n\n\t\t\tthis.getMatrixAt( i, _mesh.matrixWorld ).premultiply( matrixWorld );\n\n\t\t\tif ( ! _mesh.geometry.boundsTree ) {\n\n\t\t\t\tthis.getBoundingBoxAt( geometryId, _mesh.geometry.boundingBox );\n\t\t\t\tthis.getBoundingSphereAt( geometryId, _mesh.geometry.boundingSphere );\n\n\t\t\t\tconst drawRange = drawRanges[ geometryId ];\n\t\t\t\t_mesh.geometry.setDrawRange( drawRange.start, drawRange.count );\n\n\t\t\t}\n\n\t\t\t_mesh.raycast( raycaster, _batchIntersects );\n\n\t\t\tfor ( let j = 0, l = _batchIntersects.length; j < l; j ++ ) {\n\n\t\t\t\tconst intersect = _batchIntersects[ j ];\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersect.batchId = i;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_batchIntersects.length = 0;\n\n\t\t}\n\n\t\t_mesh.geometry.boundsTree = oldBoundsTree;\n\t\t_mesh.geometry.drawRange = oldDrawRange;\n\t\t_mesh.material = null;\n\t\t_mesh.geometry = null;\n\n\t} else {\n\n\t\torigBatchedRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nfunction acceleratedMeshRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\t\tdirection.copy( ray.direction ).multiply( _worldScale );\n\n\t\tconst scaleFactor = direction.length();\n\t\tconst near = raycaster.near / scaleFactor;\n\t\tconst far = raycaster.far / scaleFactor;\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material, near, far ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material, near, far );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options = {} ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n\nexport function computeBatchedBoundsTree( index = - 1, options = {} ) {\n\n\tif ( ! IS_REVISION_166 ) {\n\n\t\tthrow new Error( 'BatchedMesh: Three r166+ is required to compute bounds trees.' );\n\n\t}\n\n\tif ( options.indirect ) {\n\n\t\tconsole.warn( '\"Indirect\" is set to false because it is not supported for BatchedMesh.' );\n\n\t}\n\n\toptions = {\n\t\t...options,\n\t\tindirect: false,\n\t\trange: null\n\t};\n\n\tconst drawRanges = this._drawRanges || this._geometryInfo;\n\tconst geometryCount = this._geometryCount;\n\tif ( ! this.boundsTrees ) {\n\n\t\tthis.boundsTrees = new Array( geometryCount ).fill( null );\n\n\t}\n\n\tconst boundsTrees = this.boundsTrees;\n\twhile ( boundsTrees.length < geometryCount ) {\n\n\t\tboundsTrees.push( null );\n\n\t}\n\n\tif ( index < 0 ) {\n\n\t\tfor ( let i = 0; i < geometryCount; i ++ ) {\n\n\t\t\toptions.range = drawRanges[ i ];\n\t\t\tboundsTrees[ i ] = new MeshBVH( this.geometry, options );\n\n\t\t}\n\n\t\treturn boundsTrees;\n\n\t} else {\n\n\t\tif ( index < drawRanges.length ) {\n\n\t\t\toptions.range = drawRanges[ index ];\n\t\t\tboundsTrees[ index ] = new MeshBVH( this.geometry, options );\n\n\t\t}\n\n\t\treturn boundsTrees[ index ] || null;\n\n\t}\n\n}\n\nexport function disposeBatchedBoundsTree( index = - 1 ) {\n\n\tif ( index < 0 ) {\n\n\t\tthis.boundsTrees.fill( null );\n\n\t} else {\n\n\t\tif ( index < this.boundsTree.length ) {\n\n\t\t\tthis.boundsTrees[ index ] = null;\n\n\t\t}\n\n\t}\n\n}\n","<script lang=\"ts\" setup>\nimport {settings} from \"../misc/settings\";\nimport {inject, onUpdated, type Ref, ref, watch} from \"vue\";\nimport {$renderer, $scene} from \"@google/model-viewer/lib/model-viewer-base\";\nimport {$controls} from '@google/model-viewer/lib/features/controls.js';\nimport {type SmoothControls} from '@google/model-viewer/lib/three-components/SmoothControls';\nimport {ModelViewerElement} from '@google/model-viewer';\nimport type {ModelScene} from \"@google/model-viewer/lib/three-components/ModelScene\";\nimport {Hotspot} from \"@google/model-viewer/lib/three-components/Hotspot\";\nimport type {Renderer} from \"@google/model-viewer/lib/three-components/Renderer\";\nimport type {Vector3} from \"three\";\nimport {BufferGeometry, Mesh} from \"three\";\nimport {acceleratedRaycast, computeBoundsTree, disposeBoundsTree} from 'three-mesh-bvh';\nimport {setupLighting} from \"./lighting.ts\";\n\nModelViewerElement.modelCacheSize = 0; // Also needed to avoid tree shaking\n//@ts-ignore\nBufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\n//@ts-ignore\nBufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n//@ts-ignore\nMesh.prototype.raycast = acceleratedRaycast;\n\nconst props = defineProps<{ src: string }>();\n\nconst elem = ref<ModelViewerElement | null>(null);\nconst scene = ref<ModelScene | null>(null);\nconst renderer = ref<Renderer | null>(null);\nconst controls = ref<SmoothControls | null>(null);\n\nconst sett = ref<any | null>(null);\n(async () => sett.value = await settings)();\n\nlet lastCameraTargetPosition: Vector3 | undefined = undefined;\nlet lastCameraZoom: number | undefined = undefined;\nlet lastCameraUrl = props.src.toString();\nlet initialized = false\nonUpdated(() => {\n  if (!elem.value) return; // Not ready yet\n  if (initialized) return; // Already initialized\n  initialized = true;\n  elem.value.addEventListener('before-render', () => {\n    if (!elem.value) return\n    // Extract internals of model-viewer in order to hack unsupported features\n    scene.value = elem.value[$scene] as ModelScene;\n    renderer.value = elem.value[$renderer] as Renderer;\n    controls.value = (elem.value as any)[$controls] as SmoothControls;\n    // Recover the camera position if it was set before\n    if (lastCameraTargetPosition) {\n      // console.log(\"RESTORING camera position?\", lastCameraTargetPosition);\n      scene.value.setTarget(-lastCameraTargetPosition.x, -lastCameraTargetPosition.y, -lastCameraTargetPosition.z);\n      scene.value.jumpToGoal(); // Avoid move animation\n    }\n    (async () => {\n      let tries = 0\n      while (tries++ < 25) {\n        if (!lastCameraZoom || !elem.value?.getCameraOrbit()?.radius) break;\n        let change = lastCameraZoom - elem.value.getCameraOrbit().radius;\n        //console.log(\"Zooming to\", lastCameraZoom, \"from\", elem.value.getCameraOrbit().radius, \"change\", change);\n        if (Math.abs(change) < 0.001) break;\n        elem.value.zoom(-Math.sign(change) * (Math.pow(Math.abs(change) + 1, 0.9) - 1)); // Arbitrary, experimental\n        elem.value.jumpCameraToGoal();\n        await elem.value.updateComplete;\n      }\n      //console.log(\"Ready to save!\")\n      lastCameraUrl = props.src.toString();\n    })();\n  });\n  elem.value.addEventListener('camera-change', onCameraChange);\n  elem.value.addEventListener('progress', (ev) => onProgress((ev as any).detail.totalProgress));\n  setupLighting(elem.value);\n});\n\nfunction onCameraChange() {\n  // Remember the camera position to keep it in case of scene changes\n  if (scene.value && props.src.toString() == lastCameraUrl) {  // Don't overwrite with initial unwanted positions\n    lastCameraTargetPosition = scene.value.target.position.clone();\n    lastCameraZoom = elem.value?.getCameraOrbit()?.radius;\n    //console.log(\"Saving camera?\", lastCameraTargetPosition, lastCameraZoom);\n  }\n  // Also need to update the SVG overlay\n  for (let lineId in lines.value) {\n    onCameraChangeLine(lineId as any);\n  }\n}\n\n// Handles loading the events for <model-viewer>'s slotted progress bar\nconst progressBar = ref<HTMLElement | null>(null);\nconst updateBar = ref<HTMLElement | null>(null);\nlet onProgressHideTimeout: number | null = null;\nconst onProgress = (totalProgress: number) => {\n  if (!progressBar.value || !updateBar.value) return;\n  // Update the progress bar and ensure it's visible\n  progressBar.value.style.display = 'block';\n  progressBar.value.style.opacity = '1'; // Fade in\n  updateBar.value.style.width = `${totalProgress * 100}%`;\n  // Auto-hide smoothly when no progress is made for a while\n  if (onProgressHideTimeout) clearTimeout(onProgressHideTimeout);\n  onProgressHideTimeout = setTimeout(() => {\n    if (!progressBar.value) return;\n    progressBar.value.style.opacity = '0'; // Fade out\n    setTimeout(() => {\n      if (!progressBar.value) return;\n      progressBar.value.style.display = 'none'; // Actually hide\n    }, 300); // 0.3s fade out\n  }, 1000);\n};\n\nconst poster = ref<string>(\"\")\nconst setPosterText = (newText: string) => {\n  poster.value = \"data:image/svg+xml;charset=utf-8;base64,\" + btoa(\n      '<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"gray\">' +\n      '<text x=\"50%\" y=\"0%\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-size=\"48px\">' +\n      newText +\n      '</text>' +\n      '</svg>')\n}\nsetPosterText(\"Loading...\")\n\nclass Line3DData {\n  startHotspot: HTMLElement = document.body\n  endHotspot: HTMLElement = document.body\n  start2D: [number, number] = [-1000, -1000];\n  end2D: [number, number] = [-1000, -1000];\n  lineAttrs: { [key: string]: string } = {\"stroke-width\": \"2\", \"stroke\": \"red\"}\n  centerText?: string = undefined;\n  centerTextSize: [number, number] = [0, 0];\n}\n\nlet nextLineId = 1;  // Avoid 0 (falsy!)\nlet lines = ref<{ [id: number]: Line3DData }>({});\n\nfunction positionToHotspot(position: Vector3): string {\n  return position.x + ' ' + position.y + ' ' + position.z;\n}\n\nfunction addLine3D(p1: Vector3, p2: Vector3, centerText?: string, lineAttrs: { [key: string]: string } = {\n  \"stroke-width\": \"2\",\n  \"stroke\": \"red\",\n}): number | null {\n  if (!scene.value || !elem.value?.shadowRoot) return null\n  let id = nextLineId++;\n  let hotspotName1 = 'line' + id + '_start';\n  let hotspotName2 = 'line' + id + '_end';\n  scene.value.addHotspot(new Hotspot({name: hotspotName1, position: positionToHotspot(p1)}));\n  scene.value.addHotspot(new Hotspot({name: hotspotName2, position: positionToHotspot(p2)}));\n  lines.value[id] = {\n    startHotspot: elem.value.shadowRoot.querySelector('slot[name=\"' + hotspotName1 + '\"]')!!.parentElement!!,\n    endHotspot: elem.value.shadowRoot.querySelector('slot[name=\"' + hotspotName2 + '\"]')!!.parentElement!!,\n    start2D: [-1000, -1000],\n    end2D: [-1000, -1000],\n    centerText: centerText,\n    centerTextSize: [0, 0],\n    lineAttrs: lineAttrs\n  };\n  scene.value.queueRender() // Needed to update the hotspots\n  requestIdleCallback(() => onCameraChangeLine(id), {timeout: 100});\n  return id;\n}\n\nfunction removeLine3D(id: number): boolean {\n  if (!scene.value || !(id in lines.value)) return false;\n  scene.value.removeHotspot(new Hotspot({name: 'line' + id + '_start'}));\n  lines.value[id]?.startHotspot.parentElement?.remove()\n  scene.value.removeHotspot(new Hotspot({name: 'line' + id + '_end'}));\n  lines.value[id]?.endHotspot.parentElement?.remove()\n  delete lines.value[id];\n  scene.value.queueRender() // Needed to update the hotspots\n  return true;\n}\n\nlet svg = ref<SVGElement | null>(null);\n\nfunction onCameraChangeLine(lineId: number) {\n  if (!(lineId in lines.value) || !(elem.value)) return // Silently ignore (not updated yet)\n  // Update start and end 2D positions\n  let {x: xB, y: yB} = elem.value.getBoundingClientRect();\n  let {x, y} = lines.value[lineId]?.startHotspot.getBoundingClientRect() ?? {x: 0, y: 0};\n  if (lines.value[lineId]) lines.value[lineId].start2D = [x - xB, y - yB];\n  let {x: x2, y: y2} = lines.value[lineId]?.endHotspot.getBoundingClientRect() ?? {x: 0, y: 0};\n  if (lines.value[lineId]) lines.value[lineId].end2D = [x2 - xB, y2 - yB];\n\n  // Update the center text size if needed\n  if (svg.value && lines.value[lineId]?.centerText && lines.value[lineId]?.centerTextSize[0] === 0) {\n    let text = svg.value.getElementsByClassName('line' + lineId + '_text')[0] as SVGTextElement | undefined;\n    if (text) {\n      let bbox = text.getBBox();\n      if (lines.value[lineId]) lines.value[lineId].centerTextSize = [bbox.width, bbox.height];\n    }\n  }\n}\n\nfunction onElemReady(callback: (elem: ModelViewerElement) => void) {\n  if (elem.value) {\n    callback(elem.value);\n  } else {\n    watch(() => elem.value, (elem) => {\n      if (elem) callback(elem);\n    });\n  }\n}\n\nfunction entries(lines: { [id: number]: Line3DData }): [string, Line3DData][] {\n  return Object.entries(lines);\n}\n\ndefineExpose({elem, onElemReady, scene, renderer, controls, addLine3D, removeLine3D, onProgress, setPosterText});\n\nlet {disableTap} = inject<{ disableTap: Ref<boolean> }>('disableTap')!!;\nwatch(disableTap, (newDisableTap) => {\n  if (elem.value) elem.value.disableTap = newDisableTap;\n});\n</script>\n\n<template>\n  <!-- The main 3D model viewer -->\n  <model-viewer ref=\"elem\" v-if=\"sett != null\" :ar=\"sett.arModes.length > 0\" :ar-modes=\"sett.arModes\"\n                :environment-image=\"sett.environment\" :exposure=\"sett.exposure\" :autoplay=\"sett.autoplay\"\n                :orbit-sensitivity=\"sett.orbitSensitivity\" :pan-sensitivity=\"sett.panSensitivity\"\n                :poster=\"poster\" :shadow-intensity=\"sett.shadowIntensity\" :skybox-image=\"sett.skybox\"\n                :src=\"props.src\" :zoom-sensitivity=\"sett.zoomSensitivity\" alt=\"The 3D model(s)\" camera-controls\n                camera-orbit=\"45deg 45deg auto\" interaction-prompt=\"none\" max-camera-orbit=\"Infinity 180deg auto\"\n                min-camera-orbit=\"-Infinity 0deg 5%\" style=\"width: 100%; height: 100%\">\n    <slot></slot>\n    <!-- Add a progress bar to the top of the model viewer -->\n    <div ref=\"progressBar\" slot=\"progress-bar\" class=\"progress-bar\">\n      <div ref=\"updateBar\" class=\"update-bar\"/>\n    </div>\n  </model-viewer>\n\n  <!-- The SVG overlay for fake 3D lines attached to the model -->\n  <div class=\"overlay-svg-wrapper\">\n    <svg ref=\"svg\" class=\"overlay-svg\" height=\"100%\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g v-for=\"[lineId, line] in entries(lines)\" :key=\"lineId\">\n        <line :x1=\"line.start2D[0]\" :x2=\"line.end2D[0]\" :y1=\"line.start2D[1]\"\n              :y2=\"line.end2D[1]\" v-bind=\"line.lineAttrs\"/>\n        <g v-if=\"line.centerText !== undefined\">\n          <rect v-if=\"line.centerText\"\n                :height=\"line.centerTextSize[1] + 4\"\n                :width=\"line.centerTextSize[0] + 8\"\n                :x=\"(line.start2D[0] + line.end2D[0]) / 2 - line.centerTextSize[0]/2 - 4\"\n                :y=\"(line.start2D[1] + line.end2D[1]) / 2 - line.centerTextSize[1]/2 - 2\" fill=\"gray\"\n                fill-opacity=\"0.75\" rx=\"4\" ry=\"4\" stroke=\"black\"/>\n          <text v-if=\"line.centerText\" :class=\"'line' + lineId + '_text'\"\n                :x=\"(line.start2D[0] + line.end2D[0]) / 2\" :y=\"(line.start2D[1] + line.end2D[1]) / 2\"\n                dominant-baseline=\"middle\" fill=\"black\"\n                font-size=\"16\" text-anchor=\"middle\">\n            {{ line.centerText }}\n          </text>\n        </g>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<style scoped>\n/* This keeps child nodes hidden while the element loads */\n:not(:defined) > * {\n  display: none;\n}\n\n/* This is the SVG overlay that will be used for line annotations */\n.overlay-svg-wrapper {\n  position: relative;\n  top: -100%;\n  left: 0;\n  width: 100%;\n  height: 0;\n  pointer-events: none;\n  z-index: 1;\n}\n\n.overlay-svg {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100dvh;\n  pointer-events: none;\n}\n\n.progress-bar {\n  display: block;\n  pointer-events: none;\n  width: 100%;\n  height: 10%;\n  max-height: 2%;\n  position: absolute;\n  left: 50%;\n  top: 0;\n  transform: translate3d(-50%, 0%, 0);\n  border-radius: 25px;\n  box-shadow: 0 3px 10px 3px rgba(0, 0, 0, 0.5), 0 0 5px 1px rgba(0, 0, 0, 0.6);\n  border: 1px solid rgba(255, 255, 255, 0.9);\n  background-color: rgba(0, 0, 0, 0.5);\n  transition: opacity 0.3s;\n}\n\n.update-bar {\n  background-color: rgba(255, 255, 255, 0.9);\n  width: 0;\n  height: 100%;\n  border-radius: 25px;\n  float: left;\n  transition: width 0.3s;\n}\n</style>\n"],"names":["CENTER","AVERAGE","SAH","CONTAINED","TRIANGLE_INTERSECT_COST","TRAVERSAL_COST","BYTES_PER_NODE","IS_LEAFNODE_FLAG","FLOAT32_EPSILON","SKIP_GENERATION","getVertexCount","geo","getTriCount","getIndexArray","vertexCount","BufferConstructor","ensureIndex","options","index","BufferAttribute","i","getFullGeometryRange","range","triCount","drawRange","start","end","offset","count","getRootIndexRanges","ranges","rangeBoundaries","drawRangeStart","drawRangeEnd","group","groupStart","groupEnd","sortedBoundaries","a","b","hasGroupGaps","geometry","groups","finalGroup","total","getBounds","triangleBounds","target","centroidTarget","minx","miny","minz","maxx","maxy","maxz","cminx","cminy","cminz","cmaxx","cmaxy","cmaxz","cx","hx","lx","rx","cy","hy","ly","ry","cz","hz","lz","rz","computeTriangleBounds","posAttr","normalized","posArr","bufferOffset","stride","getters","tri","tri3","tri6","ai","bi","ci","el","c","min","max","halfExtents","el2","arrayToBox","nodeIndex32","array","getLongestEdgeIndex","bounds","splitDimIdx","splitDist","dist","copyBounds","source","unionBounds","aVal","bVal","d","d3","expandByTriangleBounds","startIndex","tCenter","tHalf","tMin","tMax","computeSurfaceArea","d0","d1","d2","BIN_COUNT","binsSort","sahBins","leftBounds","getOptimalSplit","nodeBoundingData","centroidBoundingData","strategy","axis","pos","getAverage","rootSurfaceArea","bestCost","cStart","cEnd","axisLeft","binWidth","truncatedBins","bin","leftCacheBounds","rightCacheBounds","splitCount","center","leftCount","rightCount","rightBounds","leftProb","rightProb","cost","binIndex","lastBin","nextBin","binCount","avg","MeshBVHNode","partition","indirectBuffer","split","left","right","axisOffset","t0","tb","partition_indirect","t","IS_LEAF","n16","uint16Array","OFFSET","n32","uint32Array","COUNT","LEFT_NODE","RIGHT_NODE","SPLIT_AXIS","float32Array","uint8Array","MAX_POINTER","countNodes","node","populateBuffer","byteOffset","buffer","_populateBuffer","stride4Offset","stride2Offset","isLeaf","boundingData","l","offset2","splitAxis","nextUnusedPointer","generateIndirectBuffer","useSharedArrayBuffer","useUint32","byteCount","buildTree","bvh","maxDepth","verbose","maxLeafTris","onProgress","indirect","indexArray","partionFunc","totalTriangles","cacheCentroidBoundingData","reachedMaxDepth","root","splitNode","triggerProgress","trianglesProcessed","depth","splitOffset","lstart","lcount","rstart","rcount","buildPackedTree","geometryRanges","nodeCount","SeparatingAxisBounds","points","field","val","p","other","Vector3","box","boxMin","boxMax","x","y","z","closestPointLineToLine","dir1","dir2","v02","l1","l2","result","v0","v10","v2","v32","d0232","d3210","d3232","d0210","denom","closestPointsSegmentToSegment","paramResult","Vector2","temp1","temp2","target1","target2","p2","closestPoint","closestPoint2","sphereIntersectTriangle","closestPointTemp","projectedPointTemp","planeTemp","Plane","lineTemp","Line3","sphere","triangle","radius","plane","pp","ZERO_EPSILON","isNearZero","value","ExtendedTriangle","Triangle","args","Sphere","satAxes","satBounds","axis0","sab0","axis1","sab1","axis2","sab2","axis3","sab3","point1","point2","edge","segment","distSq","closestDistanceSq","nexti","saTri2","arr1","arr2","cachedSatBounds","cachedSatBounds2","cachedAxis","dir","tempDir","edge1","edge2","tempPoint","triIntersectPlane","targetEdge","startPointIntersection","startIntersects","doesIntersect","suppressLog","plane1","plane2","satBounds1","satAxes1","sb","sa","satBounds2","satAxes2","sa1","i2","sa2","count1","count2","tmp","s1","e1","s2","e2","separated1","separated2","point","cornerFields","line1","line2","lineTarget","otherVec","thisVec","f11","f12","f21","f22","OrientedBox","matrix","Matrix4","v","minVec","pi","alignedSatBounds","aabbBounds","saTri","pointsArr","triSatBounds","triSatAxes","xyzFields","segments1","segments2","threshold","threshold2","i1","nextIndex","nextIndex2","index2","p1","f1","f2","f3","PrimitivePool","getNewPrimitive","primitives","primitive","ExtendedTrianglePoolBase","ExtendedTrianglePool","_BufferStack","stack","prevBuffer","BufferStack","_box1","_box2","boxStack","boxPool","Box3","shapecast","intersectsBounds","intersectsRange","boundsTraverseOrder","shapecastTraverse","length","intersectsBoundsFunc","intersectsRangeFunc","nodeScoreFunc","nodeIndexByteOffset","nodeIndex16","getLeftOffset","getRightEndOffset","c1","c2","score1","score2","box1","box2","temp","isC1Leaf","c1Intersection","c1StopTraversal","isC2Leaf","c2Intersection","c2StopTraversal","closestPointToPoint","minThreshold","maxThreshold","minThresholdSq","maxThresholdSq","closestDistanceTriIndex","score","triIndex","closestDistance","IS_GT_REVISION_169","REVISION","_vA","_vB","_vC","_uvA","_uvB","_uvC","_normalA","_normalB","_normalC","_intersectionPoint","checkIntersection","ray","pA","pB","pC","side","near","far","intersect","BackSide","DoubleSide","distance","checkBufferGeometryIntersection","position","normal","uv","uv1","intersection","barycoord","face","intersectTri","intersections","triOffset","setTriangle","ta","tc","i0","intersectTris","_indirectBuffer","intersectClosestTri","res","iterateOverTriangles","intersectsTriangleFunc","contained","refit","nodeIndices","indexArr","roots","_traverse","node32Index","force","node16Index","offsetLeft","offsetRight","forceChildren","includesLeft","includesRight","traverseLeft","traverseRight","leftChange","rightChange","didChange","lefti","righti","minLeftValue","maxLeftValue","minRightValue","maxRightValue","intersectRay","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","ox","oy","oz","intersectTris_indirect","vi","intersectClosestTri_indirect","iterateOverTriangles_indirect","raycast","intersects","_raycast","leftIndex","rightIndex","_xyzFields","raycastFirst","_raycastFirst","xyzAxis","leftToRight","c1Result","c2Result","boundingBox","triangle2","invertedMat","obb","obb2","intersectsGeometry","otherGeometry","geometryToBvh","_intersectsGeometry","cachedObb","thisGeometry","thisIndex","thisPos","tempMatrix","temp3","temp4","closestPointToGeometry","otherPos","otherIndex","tempTarget1","tempTargetDest1","tempTarget2","tempTargetDest2","closestDistanceOtherTriIndex","otherOffset","otherCount","refit_indirect","j","raycast_indirect","raycastFirst_indirect","intersectsGeometry_indirect","ti","closestPointToGeometry_indirect","otherBvh","ti2","isSharedArrayBufferSupported","_bufferStack1","_bufferStack2","_boxPool","_leftBox1","_rightBox1","_leftBox2","_rightBox2","_active","bvhcast","matrixToLocal","intersectsRanges","otherRoots","offset1","invMat","il","localBox","jl","node1Index32","node2Index32","matrix2to1","matrix1to2","intersectsRangesFunc","node1IndexByteOffset","node2IndexByteOffset","depth1","depth2","currBox","reversed","bufferStack1","bufferStack2","float32Array1","uint32Array1","uint16Array1","float32Array2","uint32Array2","uint16Array2","node1Index16","node2Index16","isLeaf1","isLeaf2","newBox","cl1","cr1","intersectCl1","intersectCr1","cl2","cr2","leftIntersects","rightIntersects","tempBox","DEFAULT_OPTIONS","MeshBVH","rootData","indexAttribute","data","newIndex","callback","rootIndex","materialOrSide","FrontSide","isMaterial","isArrayMaterial","raycastFunc","materialSide","startCount","materialIndex","closestResult","raycastFirstFunc","geomToMesh","intersectsGeometryFunc","callbacks","iterateFunc","intersectsTriangle","originalIntersectsRange","nodeIndex","intersectsTriangles","triangle1","indexAttr1","positionAttr1","assignTriangle1","indexAttr2","positionAttr2","assignTriangle2","iterateOverDoubleTriangles","index1","originalIntersectsRanges","boxToMesh","convertRaycastIntersect","hit","object","raycaster","Ray","direction","tmpInverseMatrix","origMeshRaycastFunc","Mesh","origBatchedRaycastFunc","BatchedMesh","_worldScale","_mesh","_batchIntersects","acceleratedRaycast","acceleratedBatchedMeshRaycast","acceleratedMeshRaycast","boundsTrees","drawInfo","drawRanges","matrixWorld","oldBoundsTree","oldDrawRange","geometryId","scaleFactor","hits","computeBoundsTree","disposeBoundsTree","ModelViewerElement","BufferGeometry","props","__props","elem","ref","scene","renderer","controls","sett","settings","lastCameraTargetPosition","lastCameraZoom","lastCameraUrl","initialized","onUpdated","$scene","$renderer","$controls","tries","change","onCameraChange","ev","setupLighting","lineId","lines","onCameraChangeLine","progressBar","updateBar","onProgressHideTimeout","totalProgress","poster","setPosterText","newText","nextLineId","positionToHotspot","addLine3D","centerText","lineAttrs","id","hotspotName1","hotspotName2","Hotspot","removeLine3D","svg","xB","yB","x2","y2","text","bbox","onElemReady","watch","entries","__expose","disableTap","inject","newDisableTap","_createElementBlock","_renderSlot","_ctx","_createElementVNode","_hoisted_2","_openBlock","_Fragment","_unref","line","_mergeProps","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_6"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]}